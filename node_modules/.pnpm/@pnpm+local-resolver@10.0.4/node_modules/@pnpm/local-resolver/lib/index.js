"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFromLocal = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const error_1 = require("@pnpm/error");
const graceful_fs_1 = __importDefault(require("@pnpm/graceful-fs"));
const read_project_manifest_1 = require("@pnpm/read-project-manifest");
const ssri_1 = __importDefault(require("ssri"));
const parsePref_1 = require("./parsePref");
/**
 * Resolves a package hosted on the local filesystem
 */
async function resolveFromLocal(wantedDependency, opts) {
    const spec = (0, parsePref_1.parsePref)(wantedDependency, opts.projectDir, opts.lockfileDir ?? opts.projectDir);
    if (spec == null)
        return null;
    if (spec.type === 'file') {
        return {
            id: spec.id,
            normalizedPref: spec.normalizedPref,
            resolution: {
                integrity: await getFileIntegrity(spec.fetchSpec),
                tarball: spec.id,
            },
            resolvedVia: 'local-filesystem',
        };
    }
    let localDependencyManifest;
    try {
        localDependencyManifest = await (0, read_project_manifest_1.readProjectManifestOnly)(spec.fetchSpec);
    }
    catch (internalErr) { // eslint-disable-line
        if (!(0, fs_1.existsSync)(spec.fetchSpec)) {
            if (spec.id.startsWith('file:')) {
                throw new error_1.PnpmError('LINKED_PKG_DIR_NOT_FOUND', `Could not install from "${spec.fetchSpec}" as it does not exist.`);
            }
            localDependencyManifest = {
                name: path_1.default.basename(spec.fetchSpec),
                version: '0.0.0',
            };
        }
        else {
            switch (internalErr.code) {
                case 'ENOTDIR': {
                    throw new error_1.PnpmError('NOT_PACKAGE_DIRECTORY', `Could not install from "${spec.fetchSpec}" as it is not a directory.`);
                }
                case 'ERR_PNPM_NO_IMPORTER_MANIFEST_FOUND':
                case 'ENOENT': {
                    localDependencyManifest = {
                        name: path_1.default.basename(spec.fetchSpec),
                        version: '0.0.0',
                    };
                    break;
                }
                default: {
                    throw internalErr;
                }
            }
        }
    }
    return {
        id: spec.id,
        manifest: localDependencyManifest,
        normalizedPref: spec.normalizedPref,
        resolution: {
            directory: spec.dependencyPath,
            type: 'directory',
        },
        resolvedVia: 'local-filesystem',
    };
}
exports.resolveFromLocal = resolveFromLocal;
async function getFileIntegrity(filename) {
    return (await ssri_1.default.fromStream(graceful_fs_1.default.createReadStream(filename))).toString();
}
//# sourceMappingURL=index.js.map