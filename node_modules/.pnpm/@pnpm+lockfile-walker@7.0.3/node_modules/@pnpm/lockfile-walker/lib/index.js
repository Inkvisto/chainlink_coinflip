"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lockfileWalker = exports.lockfileWalkerGroupImporterSteps = void 0;
const dp = __importStar(require("@pnpm/dependency-path"));
function lockfileWalkerGroupImporterSteps(lockfile, importerIds, opts) {
    const walked = new Set(((opts?.skipped) != null) ? Array.from(opts?.skipped) : []);
    return importerIds.map((importerId) => {
        const projectSnapshot = lockfile.importers[importerId];
        const entryNodes = Object.entries({
            ...(opts?.include?.devDependencies === false ? {} : projectSnapshot.devDependencies),
            ...(opts?.include?.dependencies === false ? {} : projectSnapshot.dependencies),
            ...(opts?.include?.optionalDependencies === false ? {} : projectSnapshot.optionalDependencies),
        })
            .map(([pkgName, reference]) => dp.refToRelative(reference, pkgName))
            .filter((nodeId) => nodeId !== null);
        return {
            importerId,
            step: step({
                includeOptionalDependencies: opts?.include?.optionalDependencies !== false,
                lockfile,
                walked,
            }, entryNodes),
        };
    });
}
exports.lockfileWalkerGroupImporterSteps = lockfileWalkerGroupImporterSteps;
function lockfileWalker(lockfile, importerIds, opts) {
    const walked = new Set(((opts?.skipped) != null) ? Array.from(opts?.skipped) : []);
    const entryNodes = [];
    const directDeps = [];
    importerIds.forEach((importerId) => {
        const projectSnapshot = lockfile.importers[importerId];
        Object.entries({
            ...(opts?.include?.devDependencies === false ? {} : projectSnapshot.devDependencies),
            ...(opts?.include?.dependencies === false ? {} : projectSnapshot.dependencies),
            ...(opts?.include?.optionalDependencies === false ? {} : projectSnapshot.optionalDependencies),
        })
            .forEach(([pkgName, reference]) => {
            const depPath = dp.refToRelative(reference, pkgName);
            if (depPath === null)
                return;
            entryNodes.push(depPath);
            directDeps.push({ alias: pkgName, depPath });
        });
    });
    return {
        directDeps,
        step: step({
            includeOptionalDependencies: opts?.include?.optionalDependencies !== false,
            lockfile,
            walked,
        }, entryNodes),
    };
}
exports.lockfileWalker = lockfileWalker;
function step(ctx, nextDepPaths) {
    const result = {
        dependencies: [],
        links: [],
        missing: [],
    };
    for (const depPath of nextDepPaths) {
        if (ctx.walked.has(depPath))
            continue;
        ctx.walked.add(depPath);
        const pkgSnapshot = ctx.lockfile.packages?.[depPath];
        if (pkgSnapshot == null) {
            if (depPath.startsWith('link:')) {
                result.links.push(depPath);
                continue;
            }
            result.missing.push(depPath);
            continue;
        }
        result.dependencies.push({
            depPath,
            next: () => step(ctx, next({ includeOptionalDependencies: ctx.includeOptionalDependencies }, pkgSnapshot)),
            pkgSnapshot,
        });
    }
    return result;
}
function next(opts, nextPkg) {
    return Object.entries({
        ...nextPkg.dependencies,
        ...(opts.includeOptionalDependencies ? nextPkg.optionalDependencies : {}),
    })
        .map(([pkgName, reference]) => dp.refToRelative(reference, pkgName))
        .filter((nodeId) => nodeId !== null);
}
//# sourceMappingURL=index.js.map