"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPackageExtender = void 0;
const parse_wanted_dependency_1 = require("@pnpm/parse-wanted-dependency");
const semver_1 = __importDefault(require("semver"));
function createPackageExtender(packageExtensions) {
    const extensionsByPkgName = new Map();
    Object.entries(packageExtensions)
        .forEach(([selector, packageExtension]) => {
        const { alias, pref } = (0, parse_wanted_dependency_1.parseWantedDependency)(selector);
        if (!extensionsByPkgName.has(alias)) {
            extensionsByPkgName.set(alias, []);
        }
        extensionsByPkgName.get(alias).push({ packageExtension, range: pref });
    });
    return extendPkgHook.bind(null, extensionsByPkgName);
}
exports.createPackageExtender = createPackageExtender;
function extendPkgHook(extensionsByPkgName, manifest) {
    const extensions = extensionsByPkgName.get(manifest.name);
    if (extensions == null)
        return manifest;
    extendPkg(manifest, extensions);
    return manifest;
}
function extendPkg(manifest, extensions) {
    for (const { range, packageExtension } of extensions) {
        if (range != null && !semver_1.default.satisfies(manifest.version, range))
            continue;
        for (const field of ['dependencies', 'optionalDependencies', 'peerDependencies', 'peerDependenciesMeta']) {
            if (!packageExtension[field])
                continue;
            manifest[field] = {
                ...packageExtension[field],
                ...manifest[field],
            }; // eslint-disable-line @typescript-eslint/no-explicit-any
        }
    }
}
//# sourceMappingURL=createPackageExtender.js.map