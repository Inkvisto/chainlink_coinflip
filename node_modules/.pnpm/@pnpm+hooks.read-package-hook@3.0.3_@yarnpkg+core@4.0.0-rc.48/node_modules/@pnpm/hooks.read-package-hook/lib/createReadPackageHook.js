"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createReadPackageHook = void 0;
const extensions_1 = require("@yarnpkg/extensions");
const isEmpty_1 = __importDefault(require("ramda/src/isEmpty"));
const pipeWith_1 = __importDefault(require("ramda/src/pipeWith"));
const createPackageExtender_1 = require("./createPackageExtender");
const createVersionsOverrider_1 = require("./createVersionsOverrider");
const createPeerDependencyPatcher_1 = require("./createPeerDependencyPatcher");
function createReadPackageHook({ ignoreCompatibilityDb, lockfileDir, overrides, packageExtensions, peerDependencyRules, readPackageHook, }) {
    const hooks = [];
    if (!ignoreCompatibilityDb) {
        hooks.push((0, createPackageExtender_1.createPackageExtender)(Object.fromEntries(extensions_1.packageExtensions)));
    }
    if (!(0, isEmpty_1.default)(packageExtensions ?? {})) {
        hooks.push((0, createPackageExtender_1.createPackageExtender)(packageExtensions));
    }
    if (Array.isArray(readPackageHook)) {
        hooks.push(...readPackageHook);
    }
    else if (readPackageHook) {
        hooks.push(readPackageHook);
    }
    if (!(0, isEmpty_1.default)(overrides ?? {})) {
        hooks.push((0, createVersionsOverrider_1.createVersionsOverrider)(overrides, lockfileDir));
    }
    if (peerDependencyRules != null &&
        (!(0, isEmpty_1.default)(peerDependencyRules.ignoreMissing) ||
            !(0, isEmpty_1.default)(peerDependencyRules.allowedVersions) ||
            !(0, isEmpty_1.default)(peerDependencyRules.allowAny))) {
        hooks.push((0, createPeerDependencyPatcher_1.createPeerDependencyPatcher)(peerDependencyRules));
    }
    if (hooks.length === 0) {
        return undefined;
    }
    const readPackageAndExtend = hooks.length === 1
        ? hooks[0]
        : ((pkg, dir) => (0, pipeWith_1.default)(async (f, res) => f(await res, dir), hooks)(pkg, dir)); // eslint-disable-line @typescript-eslint/no-explicit-any
    return readPackageAndExtend;
}
exports.createReadPackageHook = createReadPackageHook;
//# sourceMappingURL=createReadPackageHook.js.map