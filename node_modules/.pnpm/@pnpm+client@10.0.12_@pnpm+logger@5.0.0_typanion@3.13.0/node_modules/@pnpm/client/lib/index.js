"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createResolver = exports.createClient = void 0;
const default_resolver_1 = require("@pnpm/default-resolver");
const fetch_1 = require("@pnpm/fetch");
const directory_fetcher_1 = require("@pnpm/directory-fetcher");
const git_fetcher_1 = require("@pnpm/git-fetcher");
const tarball_fetcher_1 = require("@pnpm/tarball-fetcher");
const network_auth_header_1 = require("@pnpm/network.auth-header");
const map_1 = __importDefault(require("ramda/src/map"));
function createClient(opts) {
    const fetchFromRegistry = (0, fetch_1.createFetchFromRegistry)(opts);
    const getAuthHeader = (0, network_auth_header_1.createGetAuthHeaderByURI)({ allSettings: opts.authConfig, userSettings: opts.userConfig });
    return {
        fetchers: createFetchers(fetchFromRegistry, getAuthHeader, opts, opts.customFetchers),
        resolve: (0, default_resolver_1.createResolver)(fetchFromRegistry, getAuthHeader, opts),
    };
}
exports.createClient = createClient;
function createResolver(opts) {
    const fetchFromRegistry = (0, fetch_1.createFetchFromRegistry)(opts);
    const getAuthHeader = (0, network_auth_header_1.createGetAuthHeaderByURI)({ allSettings: opts.authConfig, userSettings: opts.userConfig });
    return (0, default_resolver_1.createResolver)(fetchFromRegistry, getAuthHeader, opts);
}
exports.createResolver = createResolver;
function createFetchers(fetchFromRegistry, getAuthHeader, opts, customFetchers) {
    const defaultFetchers = {
        ...(0, tarball_fetcher_1.createTarballFetcher)(fetchFromRegistry, getAuthHeader, opts),
        ...(0, git_fetcher_1.createGitFetcher)(opts),
        ...(0, directory_fetcher_1.createDirectoryFetcher)({ resolveSymlinks: opts.resolveSymlinksInInjectedDirs, includeOnlyPackageFiles: opts.includeOnlyPackageFiles }),
    };
    const overwrites = (0, map_1.default)((factory) => factory({ defaultFetchers }), // eslint-disable-line @typescript-eslint/no-explicit-any
    customFetchers ?? {} // eslint-disable-line @typescript-eslint/no-explicit-any
    );
    return {
        ...defaultFetchers,
        ...overwrites,
    };
}
//# sourceMappingURL=index.js.map