"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeBinsOfDependency = exports.removeBin = void 0;
const path_1 = __importDefault(require("path"));
const core_loggers_1 = require("@pnpm/core-loggers");
const package_bins_1 = require("@pnpm/package-bins");
const read_package_json_1 = require("@pnpm/read-package-json");
const rimraf_1 = __importDefault(require("@zkochan/rimraf"));
const cmd_extension_1 = __importDefault(require("cmd-extension"));
const is_windows_1 = __importDefault(require("is-windows"));
async function removeOnWin(cmd) {
    core_loggers_1.removalLogger.debug(cmd);
    await Promise.all([
        (0, rimraf_1.default)(cmd),
        (0, rimraf_1.default)(`${cmd}.ps1`),
        (0, rimraf_1.default)(`${cmd}${cmd_extension_1.default}`),
    ]);
}
async function removeOnNonWin(p) {
    core_loggers_1.removalLogger.debug(p);
    return (0, rimraf_1.default)(p);
}
exports.removeBin = (0, is_windows_1.default)() ? removeOnWin : removeOnNonWin;
async function removeBinsOfDependency(dependencyDir, opts) {
    const uninstalledPkgJson = await (0, read_package_json_1.safeReadPackageJsonFromDir)(dependencyDir);
    if (!uninstalledPkgJson)
        return;
    const cmds = await (0, package_bins_1.getBinsFromPackageManifest)(uninstalledPkgJson, dependencyDir);
    if (!opts.dryRun) {
        await Promise.all(cmds
            .map((cmd) => path_1.default.join(opts.binsDir, cmd.name))
            .map(exports.removeBin));
    }
    return uninstalledPkgJson;
}
exports.removeBinsOfDependency = removeBinsOfDependency;
//# sourceMappingURL=removeBins.js.map