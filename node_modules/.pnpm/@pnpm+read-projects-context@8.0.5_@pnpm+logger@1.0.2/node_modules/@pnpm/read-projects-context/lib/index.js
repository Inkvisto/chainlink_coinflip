"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readProjectsContext = void 0;
const path_1 = __importDefault(require("path"));
const lockfile_file_1 = require("@pnpm/lockfile-file");
const modules_yaml_1 = require("@pnpm/modules-yaml");
const normalize_registries_1 = require("@pnpm/normalize-registries");
const realpath_missing_1 = __importDefault(require("realpath-missing"));
async function readProjectsContext(projects, opts) {
    const relativeModulesDir = opts.modulesDir ?? 'node_modules';
    const rootModulesDir = await (0, realpath_missing_1.default)(path_1.default.join(opts.lockfileDir, relativeModulesDir));
    const modules = await (0, modules_yaml_1.readModulesManifest)(rootModulesDir);
    return {
        currentHoistPattern: modules?.hoistPattern,
        currentPublicHoistPattern: modules?.publicHoistPattern,
        hoist: (modules == null) ? undefined : Boolean(modules.hoistPattern),
        hoistedDependencies: modules?.hoistedDependencies ?? {},
        include: modules?.included ?? { dependencies: true, devDependencies: true, optionalDependencies: true },
        modules,
        pendingBuilds: modules?.pendingBuilds ?? [],
        projects: await Promise.all(projects.map(async (project) => {
            const modulesDir = await (0, realpath_missing_1.default)(path_1.default.join(project.rootDir, project.modulesDir ?? relativeModulesDir));
            const importerId = (0, lockfile_file_1.getLockfileImporterId)(opts.lockfileDir, project.rootDir);
            return {
                ...project,
                binsDir: project.binsDir ?? path_1.default.join(project.rootDir, relativeModulesDir, '.bin'),
                id: importerId,
                modulesDir,
            };
        })),
        registries: ((modules?.registries) != null) ? (0, normalize_registries_1.normalizeRegistries)(modules.registries) : undefined,
        rootModulesDir,
        skipped: new Set(modules?.skipped ?? []),
    };
}
exports.readProjectsContext = readProjectsContext;
//# sourceMappingURL=index.js.map