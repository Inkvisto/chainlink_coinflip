"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPackageStore = void 0;
const create_cafs_store_1 = require("@pnpm/create-cafs-store");
const package_requester_1 = require("@pnpm/package-requester");
const load_json_file_1 = __importDefault(require("load-json-file"));
const write_json_file_1 = __importDefault(require("write-json-file"));
const prune_1 = require("./prune");
async function createPackageStore(resolve, fetchers, initOpts) {
    const storeDir = initOpts.storeDir;
    const cafs = (0, create_cafs_store_1.createCafsStore)(storeDir, initOpts);
    const packageRequester = (0, package_requester_1.createPackageRequester)({
        force: initOpts.force,
        engineStrict: initOpts.engineStrict,
        nodeVersion: initOpts.nodeVersion,
        pnpmVersion: initOpts.pnpmVersion,
        resolve,
        fetchers,
        cafs,
        ignoreFile: initOpts.ignoreFile,
        networkConcurrency: initOpts.networkConcurrency,
        storeDir: initOpts.storeDir,
        verifyStoreIntegrity: initOpts.verifyStoreIntegrity,
    });
    return {
        close: async () => { },
        fetchPackage: packageRequester.fetchPackageToStore,
        getFilesIndexFilePath: packageRequester.getFilesIndexFilePath,
        importPackage: cafs.importPackage,
        prune: prune_1.prune.bind(null, { storeDir, cacheDir: initOpts.cacheDir }),
        requestPackage: packageRequester.requestPackage,
        upload,
    };
    async function upload(builtPkgLocation, opts) {
        const sideEffectsIndex = await cafs.addFilesFromDir(builtPkgLocation);
        // TODO: move this to a function
        // This is duplicated in @pnpm/package-requester
        const integrity = {};
        await Promise.all(Object.entries(sideEffectsIndex)
            .map(async ([filename, { writeResult, mode, size }]) => {
            const { checkedAt, integrity: fileIntegrity, } = await writeResult;
            integrity[filename] = {
                checkedAt,
                integrity: fileIntegrity.toString(),
                mode,
                size,
            };
        }));
        let filesIndex;
        try {
            filesIndex = await (0, load_json_file_1.default)(opts.filesIndexFile);
        }
        catch (err) { // eslint-disable-line
            filesIndex = { files: integrity };
        }
        filesIndex.sideEffects = filesIndex.sideEffects ?? {};
        filesIndex.sideEffects[opts.sideEffectsCacheKey] = integrity;
        await (0, write_json_file_1.default)(opts.filesIndexFile, filesIndex, { indent: undefined });
    }
}
exports.createPackageStore = createPackageStore;
//# sourceMappingURL=index.js.map