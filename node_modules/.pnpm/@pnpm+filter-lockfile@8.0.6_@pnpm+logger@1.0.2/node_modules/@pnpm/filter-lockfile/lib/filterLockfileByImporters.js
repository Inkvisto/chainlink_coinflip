"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filterLockfileByImporters = void 0;
const constants_1 = require("@pnpm/constants");
const error_1 = require("@pnpm/error");
const lockfile_walker_1 = require("@pnpm/lockfile-walker");
const logger_1 = require("@pnpm/logger");
const filterImporter_1 = require("./filterImporter");
const lockfileLogger = (0, logger_1.logger)('lockfile');
function filterLockfileByImporters(lockfile, importerIds, opts) {
    const packages = {};
    if (lockfile.packages != null) {
        pkgAllDeps((0, lockfile_walker_1.lockfileWalker)(lockfile, importerIds, { include: opts.include, skipped: opts.skipped }).step, packages, {
            failOnMissingDependencies: opts.failOnMissingDependencies,
        });
    }
    const importers = importerIds.reduce((acc, importerId) => {
        acc[importerId] = (0, filterImporter_1.filterImporter)(lockfile.importers[importerId], opts.include);
        return acc;
    }, { ...lockfile.importers });
    return {
        ...lockfile,
        importers,
        packages,
    };
}
exports.filterLockfileByImporters = filterLockfileByImporters;
function pkgAllDeps(step, pickedPackages, opts) {
    for (const { pkgSnapshot, depPath, next } of step.dependencies) {
        pickedPackages[depPath] = pkgSnapshot;
        pkgAllDeps(next(), pickedPackages, opts);
    }
    for (const depPath of step.missing) {
        if (opts.failOnMissingDependencies) {
            throw new error_1.LockfileMissingDependencyError(depPath);
        }
        lockfileLogger.debug(`No entry for "${depPath}" in ${constants_1.WANTED_LOCKFILE}`);
    }
}
//# sourceMappingURL=filterLockfileByImporters.js.map