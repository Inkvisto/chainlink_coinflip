import type { Dependencies, PeerDependencyIssuesByProjects } from '@pnpm/types';
import { type DependenciesTree, type ResolvedPackage } from './resolveDependencies';
export interface GenericDependenciesGraphNode {
    modules: string;
    dir: string;
    children: Record<string, string>;
    depth: number;
    peerDependencies?: Dependencies;
    transitivePeerDependencies: Set<string>;
    installable: boolean;
    isBuilt?: boolean;
    isPure: boolean;
    resolvedPeerNames: Set<string>;
}
export type PartialResolvedPackage = Pick<ResolvedPackage, 'depPath' | 'name' | 'peerDependencies' | 'peerDependenciesMeta' | 'version'>;
export interface GenericDependenciesGraph<T extends PartialResolvedPackage> {
    [depPath: string]: T & GenericDependenciesGraphNode;
}
export interface ProjectToResolve {
    directNodeIdsByAlias: {
        [alias: string]: string;
    };
    topParents: Array<{
        name: string;
        version: string;
        alias?: string;
    }>;
    rootDir: string;
    id: string;
}
export declare function resolvePeers<T extends PartialResolvedPackage>(opts: {
    projects: ProjectToResolve[];
    dependenciesTree: DependenciesTree<T>;
    virtualStoreDir: string;
    lockfileDir: string;
    resolvePeersFromWorkspaceRoot?: boolean;
    dedupePeerDependents?: boolean;
}): {
    dependenciesGraph: GenericDependenciesGraph<T>;
    dependenciesByProjectId: {
        [id: string]: {
            [alias: string]: string;
        };
    };
    peerDependencyIssuesByProjects: PeerDependencyIssuesByProjects;
};
