import { type PreferredVersions, type WorkspacePackages } from '@pnpm/resolver-base';
import { type ProjectManifest } from '@pnpm/types';
import { type ImporterToResolve } from '.';
import { type WantedDependency } from './getWantedDependencies';
export declare function toResolveImporter(opts: {
    defaultUpdateDepth: number;
    lockfileOnly: boolean;
    preferredVersions?: PreferredVersions;
    virtualStoreDir: string;
    workspacePackages: WorkspacePackages;
}, project: ImporterToResolve): Promise<{
    hasRemovedDependencies: boolean;
    preferredVersions: PreferredVersions;
    wantedDependencies: (WantedDependency & {
        isNew?: boolean | undefined;
        updateDepth: number;
    })[];
    id: string;
    manifest: import("@pnpm/types").BaseManifest & {
        workspaces?: string[] | undefined;
        pnpm?: {
            neverBuiltDependencies?: string[] | undefined;
            onlyBuiltDependencies?: string[] | undefined;
            overrides?: Record<string, string> | undefined;
            packageExtensions?: Record<string, import("@pnpm/types").PackageExtension> | undefined;
            peerDependencyRules?: import("@pnpm/types").PeerDependencyRules | undefined;
            allowedDeprecatedVersions?: import("@pnpm/types").AllowedDeprecatedVersions | undefined;
            allowNonAppliedPatches?: boolean | undefined;
            patchedDependencies?: Record<string, string> | undefined;
            updateConfig?: {
                ignoreDependencies?: string[] | undefined;
            } | undefined;
            auditConfig?: {
                ignoreCves?: string[] | undefined;
            } | undefined;
            requiredScripts?: string[] | undefined;
        } | undefined;
        private?: boolean | undefined;
        resolutions?: Record<string, string> | undefined;
    };
    modulesDir: string;
    removePackages?: string[] | undefined;
    rootDir: string;
    peer?: boolean | undefined;
    pinnedVersion?: import("@pnpm/manifest-utils").PinnedVersion | undefined;
    binsDir: string;
    originalManifest?: ProjectManifest | undefined;
    update?: boolean | undefined;
    updateMatching?: import("./resolveDependencies").UpdateMatchingFunction | undefined;
    updatePackageManifest: boolean;
    targetDependenciesField?: import("@pnpm/types").DependenciesField | undefined;
}>;
