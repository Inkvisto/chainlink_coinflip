import { type Lockfile, type PatchFile } from '@pnpm/lockfile-types';
import { type PreferredVersions, type Resolution, type WorkspacePackages } from '@pnpm/resolver-base';
import { type StoreController } from '@pnpm/store-controller-types';
import { type AllowedDeprecatedVersions, type ProjectManifest, type ReadPackageHook, type Registries } from '@pnpm/types';
import { type WantedDependency } from './getNonDevWantedDependencies';
import { type DependenciesTree, type LinkedDependency, type ResolvedPackage, type ResolvedPackagesByDepPath } from './resolveDependencies';
export * from './nodeIdUtils';
export type { LinkedDependency, ResolvedPackage, DependenciesTree, DependenciesTreeNode } from './resolveDependencies';
export interface ResolvedDirectDependency {
    alias: string;
    optional: boolean;
    dev: boolean;
    resolution: Resolution;
    pkgId: string;
    version: string;
    name: string;
    normalizedPref?: string;
}
export interface Importer<T> {
    id: string;
    manifest: ProjectManifest;
    modulesDir: string;
    removePackages?: string[];
    rootDir: string;
    wantedDependencies: Array<T & WantedDependency>;
}
export interface ImporterToResolveGeneric<T> extends Importer<T> {
    updatePackageManifest: boolean;
    updateMatching?: (pkgName: string) => boolean;
    hasRemovedDependencies?: boolean;
    preferredVersions?: PreferredVersions;
    wantedDependencies: Array<T & WantedDependency & {
        updateDepth: number;
    }>;
}
export interface ResolveDependenciesOptions {
    autoInstallPeers?: boolean;
    allowBuild?: (pkgName: string) => boolean;
    allowedDeprecatedVersions: AllowedDeprecatedVersions;
    allowNonAppliedPatches: boolean;
    currentLockfile: Lockfile;
    dryRun: boolean;
    engineStrict: boolean;
    force: boolean;
    forceFullResolution: boolean;
    ignoreScripts?: boolean;
    hooks: {
        readPackage?: ReadPackageHook;
    };
    nodeVersion: string;
    registries: Registries;
    patchedDependencies?: Record<string, PatchFile>;
    pnpmVersion: string;
    preferredVersions?: PreferredVersions;
    preferWorkspacePackages?: boolean;
    resolutionMode?: 'highest' | 'time-based' | 'lowest-direct';
    resolvePeersFromWorkspaceRoot?: boolean;
    linkWorkspacePackagesDepth?: number;
    lockfileDir: string;
    storeController: StoreController;
    tag: string;
    virtualStoreDir: string;
    wantedLockfile: Lockfile;
    workspacePackages: WorkspacePackages;
}
export declare function resolveDependencyTree<T>(importers: Array<ImporterToResolveGeneric<T>>, opts: ResolveDependenciesOptions): Promise<{
    dependenciesTree: DependenciesTree<ResolvedPackage>;
    outdatedDependencies: {
        [pkgId: string]: string;
    };
    resolvedImporters: {
        [id: string]: {
            directDependencies: ResolvedDirectDependency[];
            directNodeIdsByAlias: {
                [alias: string]: string;
            };
            linkedDependencies: LinkedDependency[];
        };
    };
    resolvedPackagesByDepPath: ResolvedPackagesByDepPath;
    wantedToBeSkippedPackageIds: Set<string>;
    appliedPatches: Set<string>;
    time: Record<string, string> | undefined;
}>;
