"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPeerDependencyIssues = void 0;
const resolve_dependencies_1 = require("@pnpm/resolve-dependencies");
const get_context_1 = require("@pnpm/get-context");
const hooks_read_package_hook_1 = require("@pnpm/hooks.read-package-hook");
const getPreferredVersions_1 = require("./install/getPreferredVersions");
const normalize_registries_1 = require("@pnpm/normalize-registries");
async function getPeerDependencyIssues(projects, opts) {
    const lockfileDir = opts.lockfileDir ?? process.cwd();
    const ctx = await (0, get_context_1.getContext)({
        force: false,
        forceSharedLockfile: false,
        extraBinPaths: [],
        lockfileDir,
        nodeLinker: opts.nodeLinker ?? 'isolated',
        registries: normalize_registries_1.DEFAULT_REGISTRIES,
        useLockfile: true,
        allProjects: projects,
        ...opts,
    });
    const projectsToResolve = Object.values(ctx.projects).map((project) => ({
        ...project,
        updatePackageManifest: false,
        wantedDependencies: (0, resolve_dependencies_1.getWantedDependencies)(project.manifest),
    }));
    const preferredVersions = (0, getPreferredVersions_1.getPreferredVersionsFromLockfileAndManifests)(ctx.wantedLockfile.packages, Object.values(ctx.projects).map(({ manifest }) => manifest));
    const { peerDependencyIssuesByProjects, waitTillAllFetchingsFinish, } = await (0, resolve_dependencies_1.resolveDependencies)(projectsToResolve, {
        currentLockfile: ctx.currentLockfile,
        allowedDeprecatedVersions: {},
        allowNonAppliedPatches: false,
        defaultUpdateDepth: -1,
        dryRun: true,
        engineStrict: false,
        force: false,
        forceFullResolution: true,
        hooks: {
            readPackage: (0, hooks_read_package_hook_1.createReadPackageHook)({
                ignoreCompatibilityDb: opts.ignoreCompatibilityDb,
                lockfileDir,
                overrides: opts.overrides,
                packageExtensions: opts.packageExtensions,
                readPackageHook: opts.hooks?.readPackage,
            }),
        },
        linkWorkspacePackagesDepth: opts.linkWorkspacePackagesDepth ?? (opts.saveWorkspaceProtocol ? 0 : -1),
        lockfileDir,
        nodeVersion: opts.nodeVersion ?? process.version,
        pnpmVersion: '',
        preferWorkspacePackages: opts.preferWorkspacePackages,
        preferredVersions,
        preserveWorkspaceProtocol: false,
        registries: ctx.registries,
        saveWorkspaceProtocol: false,
        storeController: opts.storeController,
        tag: 'latest',
        virtualStoreDir: ctx.virtualStoreDir,
        wantedLockfile: ctx.wantedLockfile,
        workspacePackages: opts.workspacePackages ?? {},
    });
    await waitTillAllFetchingsFinish();
    return peerDependencyIssuesByProjects;
}
exports.getPeerDependencyIssues = getPeerDependencyIssues;
//# sourceMappingURL=getPeerDependencyIssues.js.map