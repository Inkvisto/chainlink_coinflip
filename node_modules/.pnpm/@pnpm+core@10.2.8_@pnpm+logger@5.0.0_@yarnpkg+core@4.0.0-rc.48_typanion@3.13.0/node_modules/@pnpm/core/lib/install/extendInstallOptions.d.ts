import { type ProjectOptions } from '@pnpm/get-context';
import { type HoistingLimits } from '@pnpm/headless';
import { type Lockfile } from '@pnpm/lockfile-file';
import { type IncludedDependencies } from '@pnpm/modules-yaml';
import { type WorkspacePackages } from '@pnpm/resolver-base';
import { type StoreController } from '@pnpm/store-controller-types';
import { type AllowedDeprecatedVersions, type PackageExtension, type PeerDependencyRules, type ReadPackageHook, type Registries } from '@pnpm/types';
import { type ReporterFunction } from '../types';
import { type PreResolutionHookContext } from '@pnpm/hooks.types';
export interface StrictInstallOptions {
    autoInstallPeers: boolean;
    forceSharedLockfile: boolean;
    frozenLockfile: boolean;
    frozenLockfileIfExists: boolean;
    enablePnp: boolean;
    extraBinPaths: string[];
    extraEnv: Record<string, string>;
    hoistingLimits?: HoistingLimits;
    externalDependencies?: Set<string>;
    useLockfile: boolean;
    saveLockfile: boolean;
    useGitBranchLockfile: boolean;
    mergeGitBranchLockfiles: boolean;
    linkWorkspacePackagesDepth: number;
    lockfileOnly: boolean;
    forceFullResolution: boolean;
    fixLockfile: boolean;
    dedupe: boolean;
    ignoreCompatibilityDb: boolean;
    ignoreDepScripts: boolean;
    ignorePackageManifest: boolean;
    preferFrozenLockfile: boolean;
    saveWorkspaceProtocol: boolean | 'rolling';
    lockfileCheck?: (prev: Lockfile, next: Lockfile) => void;
    lockfileIncludeTarballUrl: boolean;
    preferWorkspacePackages: boolean;
    preserveWorkspaceProtocol: boolean;
    scriptsPrependNodePath: boolean | 'warn-only';
    scriptShell?: string;
    shellEmulator: boolean;
    storeController: StoreController;
    storeDir: string;
    reporter: ReporterFunction;
    force: boolean;
    forcePublicHoistPattern: boolean;
    depth: number;
    lockfileDir: string;
    modulesDir: string;
    rawConfig: Record<string, any>;
    verifyStoreIntegrity: boolean;
    engineStrict: boolean;
    neverBuiltDependencies?: string[];
    onlyBuiltDependencies?: string[];
    nodeExecPath?: string;
    nodeLinker: 'isolated' | 'hoisted' | 'pnp';
    nodeVersion: string;
    packageExtensions: Record<string, PackageExtension>;
    packageManager: {
        name: string;
        version: string;
    };
    pruneLockfileImporters: boolean;
    hooks: {
        readPackage?: ReadPackageHook[];
        preResolution?: (ctx: PreResolutionHookContext) => Promise<void>;
        afterAllResolved?: Array<(lockfile: Lockfile) => Lockfile | Promise<Lockfile>>;
    };
    sideEffectsCacheRead: boolean;
    sideEffectsCacheWrite: boolean;
    strictPeerDependencies: boolean;
    include: IncludedDependencies;
    includeDirect: IncludedDependencies;
    ignoreCurrentPrefs: boolean;
    ignoreScripts: boolean;
    childConcurrency: number;
    userAgent: string;
    unsafePerm: boolean;
    registries: Registries;
    tag: string;
    overrides: Record<string, string>;
    ownLifecycleHooksStdio: 'inherit' | 'pipe';
    workspacePackages: WorkspacePackages;
    pruneStore: boolean;
    virtualStoreDir?: string;
    dir: string;
    symlink: boolean;
    enableModulesDir: boolean;
    modulesCacheMaxAge: number;
    peerDependencyRules: PeerDependencyRules;
    allowedDeprecatedVersions: AllowedDeprecatedVersions;
    allowNonAppliedPatches: boolean;
    preferSymlinkedExecutables: boolean;
    resolutionMode: 'highest' | 'time-based' | 'lowest-direct';
    resolvePeersFromWorkspaceRoot: boolean;
    ignoreWorkspaceCycles: boolean;
    publicHoistPattern: string[] | undefined;
    hoistPattern: string[] | undefined;
    forceHoistPattern: boolean;
    shamefullyHoist: boolean;
    forceShamefullyHoist: boolean;
    global: boolean;
    globalBin?: string;
    patchedDependencies?: Record<string, string>;
    allProjects: ProjectOptions[];
    resolveSymlinksInInjectedDirs: boolean;
    dedupeDirectDeps: boolean;
    dedupePeerDependents: boolean;
    extendNodePath: boolean;
    excludeLinksFromLockfile: boolean;
    confirmModulesPurge: boolean;
}
export type InstallOptions = Partial<StrictInstallOptions> & Pick<StrictInstallOptions, 'storeDir' | 'storeController'>;
export type ProcessedInstallOptions = StrictInstallOptions & {
    readPackageHook?: ReadPackageHook;
};
export declare function extendOptions(opts: InstallOptions): Promise<ProcessedInstallOptions>;
