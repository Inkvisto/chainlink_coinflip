import { type InstallationResultStats } from '@pnpm/headless';
import { type PinnedVersion, type UpdateMatchingFunction, type WantedDependency } from '@pnpm/resolve-dependencies';
import { type PreferredVersions } from '@pnpm/resolver-base';
import { type DependenciesField, type PeerDependencyIssues, type ProjectManifest, type ReadPackageHook } from '@pnpm/types';
import { type InstallOptions } from './extendInstallOptions';
interface InstallMutationOptions {
    update?: boolean;
    updateMatching?: UpdateMatchingFunction;
    updatePackageManifest?: boolean;
}
export interface InstallDepsMutation extends InstallMutationOptions {
    mutation: 'install';
    pruneDirectDependencies?: boolean;
}
export interface InstallSomeDepsMutation extends InstallMutationOptions {
    allowNew?: boolean;
    dependencySelectors: string[];
    mutation: 'installSome';
    peer?: boolean;
    pruneDirectDependencies?: boolean;
    pinnedVersion?: PinnedVersion;
    targetDependenciesField?: DependenciesField;
}
export interface UninstallSomeDepsMutation {
    mutation: 'uninstallSome';
    dependencyNames: string[];
    targetDependenciesField?: DependenciesField;
}
export interface UnlinkDepsMutation {
    mutation: 'unlink';
}
export interface UnlinkSomeDepsMutation {
    mutation: 'unlinkSome';
    dependencyNames: string[];
}
export type DependenciesMutation = InstallDepsMutation | InstallSomeDepsMutation | UninstallSomeDepsMutation | UnlinkDepsMutation | UnlinkSomeDepsMutation;
export declare function install(manifest: ProjectManifest, opts: Omit<InstallOptions, 'allProjects'> & {
    preferredVersions?: PreferredVersions;
    pruneDirectDependencies?: boolean;
} & InstallMutationOptions): Promise<ProjectManifest>;
export type MutatedProject = DependenciesMutation & {
    rootDir: string;
};
export type MutateModulesOptions = InstallOptions & {
    preferredVersions?: PreferredVersions;
    hooks?: {
        readPackage?: ReadPackageHook[] | ReadPackageHook;
    } | InstallOptions['hooks'];
};
export declare function mutateModulesInSingleProject(project: MutatedProject & {
    binsDir?: string;
    manifest: ProjectManifest;
    rootDir: string;
    modulesDir?: string;
}, maybeOpts: Omit<MutateModulesOptions, 'allProjects'> & InstallMutationOptions): Promise<UpdatedProject>;
interface MutateModulesResult {
    updatedProjects: UpdatedProject[];
    stats: InstallationResultStats;
}
export declare function mutateModules(projects: MutatedProject[], maybeOpts: MutateModulesOptions): Promise<MutateModulesResult>;
export declare function createObjectChecksum(obj: unknown): string;
export declare function addDependenciesToPackage(manifest: ProjectManifest, dependencySelectors: string[], opts: Omit<InstallOptions, 'allProjects'> & {
    bin?: string;
    allowNew?: boolean;
    peer?: boolean;
    pinnedVersion?: 'major' | 'minor' | 'patch';
    targetDependenciesField?: DependenciesField;
} & InstallMutationOptions): Promise<ProjectManifest>;
export type ImporterToUpdate = {
    buildIndex: number;
    binsDir: string;
    id: string;
    manifest: ProjectManifest;
    originalManifest?: ProjectManifest;
    modulesDir: string;
    rootDir: string;
    pruneDirectDependencies: boolean;
    removePackages?: string[];
    updatePackageManifest: boolean;
    wantedDependencies: Array<WantedDependency & {
        isNew?: boolean;
        updateSpec?: boolean;
        preserveNonSemverVersionSpec?: boolean;
    }>;
} & DependenciesMutation;
export interface UpdatedProject {
    originalManifest?: ProjectManifest;
    manifest: ProjectManifest;
    peerDependencyIssues?: PeerDependencyIssues;
    rootDir: string;
}
export {};
