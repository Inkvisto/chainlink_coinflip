"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPreferredVersionsFromLockfileAndManifests = exports.getAllUniqueSpecs = void 0;
const lockfile_utils_1 = require("@pnpm/lockfile-utils");
const manifest_utils_1 = require("@pnpm/manifest-utils");
const resolver_base_1 = require("@pnpm/resolver-base");
const version_selector_type_1 = __importDefault(require("version-selector-type"));
function getAllUniqueSpecs(manifests) {
    const allSpecs = {};
    const ignored = new Set();
    for (const manifest of manifests) {
        const specs = (0, manifest_utils_1.getAllDependenciesFromManifest)(manifest);
        for (const [name, spec] of Object.entries(specs)) {
            if (ignored.has(name))
                continue;
            if (allSpecs[name] != null && allSpecs[name] !== spec || spec.includes(':')) {
                ignored.add(name);
                delete allSpecs[name];
                continue;
            }
            allSpecs[name] = spec;
        }
    }
    return allSpecs;
}
exports.getAllUniqueSpecs = getAllUniqueSpecs;
function getPreferredVersionsFromLockfileAndManifests(snapshots, manifests) {
    const preferredVersions = {};
    for (const manifest of manifests) {
        const specs = (0, manifest_utils_1.getAllDependenciesFromManifest)(manifest);
        for (const [name, spec] of Object.entries(specs)) {
            const selector = (0, version_selector_type_1.default)(spec);
            if (!selector)
                continue;
            preferredVersions[name] = preferredVersions[name] ?? {};
            preferredVersions[name][spec] = {
                selectorType: selector.type,
                weight: resolver_base_1.DIRECT_DEP_SELECTOR_WEIGHT,
            };
        }
    }
    if (!snapshots)
        return preferredVersions;
    addPreferredVersionsFromLockfile(snapshots, preferredVersions);
    return preferredVersions;
}
exports.getPreferredVersionsFromLockfileAndManifests = getPreferredVersionsFromLockfileAndManifests;
function addPreferredVersionsFromLockfile(snapshots, preferredVersions) {
    for (const [depPath, snapshot] of Object.entries(snapshots)) {
        const { name, version } = (0, lockfile_utils_1.nameVerFromPkgSnapshot)(depPath, snapshot);
        if (!preferredVersions[name]) {
            preferredVersions[name] = { [version]: 'version' };
        }
        else if (!preferredVersions[name][version]) {
            preferredVersions[name][version] = 'version';
        }
    }
}
//# sourceMappingURL=getPreferredVersions.js.map