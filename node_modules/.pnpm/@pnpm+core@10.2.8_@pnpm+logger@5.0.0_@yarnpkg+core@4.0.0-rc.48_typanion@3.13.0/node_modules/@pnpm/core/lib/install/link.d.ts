import { type DepsStateCache } from '@pnpm/calc-dep-state';
import { type InstallationResultStats } from '@pnpm/headless';
import { type Lockfile } from '@pnpm/lockfile-file';
import { type IncludedDependencies } from '@pnpm/modules-yaml';
import { type DependenciesGraph, type LinkedDependency } from '@pnpm/resolve-dependencies';
import { type StoreController } from '@pnpm/store-controller-types';
import { type HoistedDependencies, type Registries } from '@pnpm/types';
import { type ImporterToUpdate } from './index';
export declare function linkPackages(projects: ImporterToUpdate[], depGraph: DependenciesGraph, opts: {
    currentLockfile: Lockfile;
    dedupeDirectDeps: boolean;
    dependenciesByProjectId: Record<string, Record<string, string>>;
    force: boolean;
    depsStateCache: DepsStateCache;
    extraNodePaths: string[];
    hoistedDependencies: HoistedDependencies;
    hoistedModulesDir: string;
    hoistPattern?: string[];
    ignoreScripts: boolean;
    publicHoistPattern?: string[];
    include: IncludedDependencies;
    linkedDependenciesByProjectId: Record<string, LinkedDependency[]>;
    lockfileDir: string;
    makePartialCurrentLockfile: boolean;
    outdatedDependencies: Record<string, string>;
    pruneStore: boolean;
    pruneVirtualStore: boolean;
    registries: Registries;
    rootModulesDir: string;
    sideEffectsCacheRead: boolean;
    symlink: boolean;
    skipped: Set<string>;
    storeController: StoreController;
    virtualStoreDir: string;
    wantedLockfile: Lockfile;
    wantedToBeSkippedPackageIds: Set<string>;
}): Promise<{
    currentLockfile: Lockfile;
    newDepPaths: string[];
    newHoistedDependencies: HoistedDependencies;
    removedDepPaths: Set<string>;
    stats: InstallationResultStats;
}>;
