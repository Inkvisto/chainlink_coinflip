"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readPatch = void 0;
const chalk_1 = __importDefault(require("chalk"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("../path");
const path_2 = require("path");
const parse_1 = require("./parse");
function readPatch({ patchFilePath, packageDetails, patchDir, }) {
    try {
        return parse_1.parsePatchFile(fs_extra_1.readFileSync(patchFilePath).toString());
    }
    catch (e) {
        if (packageDetails == null || patchDir == null) {
            throw e;
        }
        const fixupSteps = [];
        const relativePatchFilePath = path_2.normalize(path_1.relative(process.cwd(), patchFilePath));
        const patchBaseDir = relativePatchFilePath.slice(0, relativePatchFilePath.indexOf(patchDir));
        if (patchBaseDir) {
            fixupSteps.push(`cd ${patchBaseDir}`);
        }
        fixupSteps.push(`patch -p1 -i ${relativePatchFilePath.slice(relativePatchFilePath.indexOf(patchDir))}`);
        fixupSteps.push(`npx patch-package ${packageDetails.pathSpecifier}`);
        if (patchBaseDir) {
            fixupSteps.push(`cd ${path_1.relative(path_1.resolve(process.cwd(), patchBaseDir), process.cwd())}`);
        }
        console.error(`
${chalk_1.default.red.bold("**ERROR**")} ${chalk_1.default.red(`Failed to apply patch for package ${chalk_1.default.bold(packageDetails.humanReadablePathSpecifier)}`)}
    
  This happened because the patch file ${relativePatchFilePath} could not be parsed.
   
  If you just upgraded patch-package, you can try running:
  
    ${fixupSteps.join("\n    ")}
    
  Otherwise, try manually creating the patch file again.
  
  If the problem persists, please submit a bug report:
  
    https://github.com/ds300/patch-package/issues/new?title=Patch+file+parse+error&body=%3CPlease+attach+the+patch+file+in+question%3E

`);
        process.exit(1);
    }
    return [];
}
exports.readPatch = readPatch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRjaC9yZWFkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGtEQUF5QjtBQUN6Qix1Q0FBdUM7QUFDdkMsa0NBQTJDO0FBQzNDLCtCQUFnQztBQUVoQyxtQ0FBdUQ7QUFFdkQsU0FBZ0IsU0FBUyxDQUFDLEVBQ3hCLGFBQWEsRUFDYixjQUFjLEVBQ2QsUUFBUSxHQUtUO0lBQ0MsSUFBSTtRQUNGLE9BQU8sc0JBQWMsQ0FBQyx1QkFBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUE7S0FDOUQ7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLElBQUksY0FBYyxJQUFJLElBQUksSUFBSSxRQUFRLElBQUksSUFBSSxFQUFFO1lBQzlDLE1BQU0sQ0FBQyxDQUFBO1NBQ1I7UUFDRCxNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUE7UUFDL0IsTUFBTSxxQkFBcUIsR0FBRyxnQkFBUyxDQUNyQyxlQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUN2QyxDQUFBO1FBQ0QsTUFBTSxZQUFZLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUM5QyxDQUFDLEVBQ0QscUJBQXFCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUN4QyxDQUFBO1FBQ0QsSUFBSSxZQUFZLEVBQUU7WUFDaEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLFlBQVksRUFBRSxDQUFDLENBQUE7U0FDdEM7UUFDRCxVQUFVLENBQUMsSUFBSSxDQUNiLGdCQUFnQixxQkFBcUIsQ0FBQyxLQUFLLENBQ3pDLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FDeEMsRUFBRSxDQUNKLENBQUE7UUFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLHFCQUFxQixjQUFjLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtRQUNwRSxJQUFJLFlBQVksRUFBRTtZQUNoQixVQUFVLENBQUMsSUFBSSxDQUNiLE1BQU0sZUFBUSxDQUFDLGNBQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsWUFBWSxDQUFDLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FDdEUsQ0FBQTtTQUNGO1FBRUQsT0FBTyxDQUFDLEtBQUssQ0FBQztFQUNoQixlQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxlQUFLLENBQUMsR0FBRyxDQUNwQyxxQ0FBcUMsZUFBSyxDQUFDLElBQUksQ0FDN0MsY0FBYyxDQUFDLDBCQUEwQixDQUMxQyxFQUFFLENBQ0o7O3lDQUVvQyxxQkFBcUI7Ozs7TUFJeEQsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7O0NBUTlCLENBQUMsQ0FBQTtRQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FDaEI7SUFDRCxPQUFPLEVBQUUsQ0FBQTtBQUNYLENBQUM7QUE3REQsOEJBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWxrIGZyb20gXCJjaGFsa1wiXG5pbXBvcnQgeyByZWFkRmlsZVN5bmMgfSBmcm9tIFwiZnMtZXh0cmFcIlxuaW1wb3J0IHsgcmVsYXRpdmUsIHJlc29sdmUgfSBmcm9tIFwiLi4vcGF0aFwiXG5pbXBvcnQgeyBub3JtYWxpemUgfSBmcm9tIFwicGF0aFwiXG5pbXBvcnQgeyBQYWNrYWdlRGV0YWlscyB9IGZyb20gXCIuLi9QYWNrYWdlRGV0YWlsc1wiXG5pbXBvcnQgeyBwYXJzZVBhdGNoRmlsZSwgUGF0Y2hGaWxlUGFydCB9IGZyb20gXCIuL3BhcnNlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIHJlYWRQYXRjaCh7XG4gIHBhdGNoRmlsZVBhdGgsXG4gIHBhY2thZ2VEZXRhaWxzLFxuICBwYXRjaERpcixcbn06IHtcbiAgcGF0Y2hGaWxlUGF0aDogc3RyaW5nXG4gIHBhY2thZ2VEZXRhaWxzPzogUGFja2FnZURldGFpbHNcbiAgcGF0Y2hEaXI/OiBzdHJpbmdcbn0pOiBQYXRjaEZpbGVQYXJ0W10ge1xuICB0cnkge1xuICAgIHJldHVybiBwYXJzZVBhdGNoRmlsZShyZWFkRmlsZVN5bmMocGF0Y2hGaWxlUGF0aCkudG9TdHJpbmcoKSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChwYWNrYWdlRGV0YWlscyA9PSBudWxsIHx8IHBhdGNoRGlyID09IG51bGwpIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gICAgY29uc3QgZml4dXBTdGVwczogc3RyaW5nW10gPSBbXVxuICAgIGNvbnN0IHJlbGF0aXZlUGF0Y2hGaWxlUGF0aCA9IG5vcm1hbGl6ZShcbiAgICAgIHJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIHBhdGNoRmlsZVBhdGgpLFxuICAgIClcbiAgICBjb25zdCBwYXRjaEJhc2VEaXIgPSByZWxhdGl2ZVBhdGNoRmlsZVBhdGguc2xpY2UoXG4gICAgICAwLFxuICAgICAgcmVsYXRpdmVQYXRjaEZpbGVQYXRoLmluZGV4T2YocGF0Y2hEaXIpLFxuICAgIClcbiAgICBpZiAocGF0Y2hCYXNlRGlyKSB7XG4gICAgICBmaXh1cFN0ZXBzLnB1c2goYGNkICR7cGF0Y2hCYXNlRGlyfWApXG4gICAgfVxuICAgIGZpeHVwU3RlcHMucHVzaChcbiAgICAgIGBwYXRjaCAtcDEgLWkgJHtyZWxhdGl2ZVBhdGNoRmlsZVBhdGguc2xpY2UoXG4gICAgICAgIHJlbGF0aXZlUGF0Y2hGaWxlUGF0aC5pbmRleE9mKHBhdGNoRGlyKSxcbiAgICAgICl9YCxcbiAgICApXG4gICAgZml4dXBTdGVwcy5wdXNoKGBucHggcGF0Y2gtcGFja2FnZSAke3BhY2thZ2VEZXRhaWxzLnBhdGhTcGVjaWZpZXJ9YClcbiAgICBpZiAocGF0Y2hCYXNlRGlyKSB7XG4gICAgICBmaXh1cFN0ZXBzLnB1c2goXG4gICAgICAgIGBjZCAke3JlbGF0aXZlKHJlc29sdmUocHJvY2Vzcy5jd2QoKSwgcGF0Y2hCYXNlRGlyKSwgcHJvY2Vzcy5jd2QoKSl9YCxcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zb2xlLmVycm9yKGBcbiR7Y2hhbGsucmVkLmJvbGQoXCIqKkVSUk9SKipcIil9ICR7Y2hhbGsucmVkKFxuICAgICAgYEZhaWxlZCB0byBhcHBseSBwYXRjaCBmb3IgcGFja2FnZSAke2NoYWxrLmJvbGQoXG4gICAgICAgIHBhY2thZ2VEZXRhaWxzLmh1bWFuUmVhZGFibGVQYXRoU3BlY2lmaWVyLFxuICAgICAgKX1gLFxuICAgICl9XG4gICAgXG4gIFRoaXMgaGFwcGVuZWQgYmVjYXVzZSB0aGUgcGF0Y2ggZmlsZSAke3JlbGF0aXZlUGF0Y2hGaWxlUGF0aH0gY291bGQgbm90IGJlIHBhcnNlZC5cbiAgIFxuICBJZiB5b3UganVzdCB1cGdyYWRlZCBwYXRjaC1wYWNrYWdlLCB5b3UgY2FuIHRyeSBydW5uaW5nOlxuICBcbiAgICAke2ZpeHVwU3RlcHMuam9pbihcIlxcbiAgICBcIil9XG4gICAgXG4gIE90aGVyd2lzZSwgdHJ5IG1hbnVhbGx5IGNyZWF0aW5nIHRoZSBwYXRjaCBmaWxlIGFnYWluLlxuICBcbiAgSWYgdGhlIHByb2JsZW0gcGVyc2lzdHMsIHBsZWFzZSBzdWJtaXQgYSBidWcgcmVwb3J0OlxuICBcbiAgICBodHRwczovL2dpdGh1Yi5jb20vZHMzMDAvcGF0Y2gtcGFja2FnZS9pc3N1ZXMvbmV3P3RpdGxlPVBhdGNoK2ZpbGUrcGFyc2UrZXJyb3ImYm9keT0lM0NQbGVhc2UrYXR0YWNoK3RoZStwYXRjaCtmaWxlK2luK3F1ZXN0aW9uJTNFXG5cbmApXG4gICAgcHJvY2Vzcy5leGl0KDEpXG4gIH1cbiAgcmV0dXJuIFtdXG59XG4iXX0=