import { type Lockfile } from '@pnpm/lockfile-file';
import { type IncludedDependencies } from '@pnpm/modules-yaml';
import { type PatchFile, type Registries } from '@pnpm/types';
import { type PackageFilesResponse, type StoreController } from '@pnpm/store-controller-types';
export interface DependenciesGraphNode {
    alias?: string;
    hasBundledDependencies: boolean;
    modules: string;
    name: string;
    fetchingFiles: () => Promise<PackageFilesResponse>;
    finishing: () => Promise<void>;
    dir: string;
    children: Record<string, string>;
    optionalDependencies: Set<string>;
    optional: boolean;
    depPath: string;
    isBuilt?: boolean;
    requiresBuild: boolean;
    prepare: boolean;
    hasBin: boolean;
    filesIndexFile: string;
    patchFile?: PatchFile;
}
export interface DependenciesGraph {
    [depPath: string]: DependenciesGraphNode;
}
export interface LockfileToDepGraphOptions {
    autoInstallPeers: boolean;
    engineStrict: boolean;
    force: boolean;
    importerIds: string[];
    include: IncludedDependencies;
    ignoreScripts: boolean;
    lockfileDir: string;
    nodeVersion: string;
    pnpmVersion: string;
    patchedDependencies?: Record<string, PatchFile>;
    registries: Registries;
    sideEffectsCacheRead: boolean;
    skipped: Set<string>;
    storeController: StoreController;
    storeDir: string;
    virtualStoreDir: string;
}
export interface DirectDependenciesByImporterId {
    [importerId: string]: {
        [alias: string]: string;
    };
}
export interface DepHierarchy {
    [depPath: string]: Record<string, DepHierarchy>;
}
export interface LockfileToDepGraphResult {
    directDependenciesByImporterId: DirectDependenciesByImporterId;
    graph: DependenciesGraph;
    hierarchy?: DepHierarchy;
    hoistedLocations?: Record<string, string[]>;
    symlinkedDirectDependenciesByImporterId?: DirectDependenciesByImporterId;
    prevGraph?: DependenciesGraph;
    pkgLocationsByDepPath?: Record<string, string[]>;
}
export declare function lockfileToDepGraph(lockfile: Lockfile, currentLockfile: Lockfile | null, opts: LockfileToDepGraphOptions): Promise<LockfileToDepGraphResult>;
