"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.symlinkDirectRootDependency = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const core_loggers_1 = require("@pnpm/core-loggers");
const logger_1 = require("@pnpm/logger");
const symlink_dir_1 = __importDefault(require("symlink-dir"));
const DEP_TYPE_BY_DEPS_FIELD_NAME = {
    dependencies: 'prod',
    devDependencies: 'dev',
    optionalDependencies: 'optional',
};
async function symlinkDirectRootDependency(dependencyLocation, destModulesDir, importAs, opts) {
    // `opts.destModulesDir` may be a non-existent `node_modules` dir
    // so `fs.realpath` would throw.
    // Even though `symlinkDir` creates the dir if it doesn't exist,
    // our dir may include an ancestor dir which is symlinked,
    // so we create it if it doesn't exist, and then find its realpath.
    let destModulesDirReal;
    try {
        destModulesDirReal = await fs_1.promises.realpath(destModulesDir);
    }
    catch (err) { // eslint-disable-line
        if (err.code === 'ENOENT') {
            await fs_1.promises.mkdir(destModulesDir, { recursive: true });
            destModulesDirReal = await fs_1.promises.realpath(destModulesDir);
        }
        else {
            throw err;
        }
    }
    let dependencyRealLocation;
    try {
        dependencyRealLocation = await fs_1.promises.realpath(dependencyLocation);
    }
    catch (err) { // eslint-disable-line
        if (err.code !== 'ENOENT')
            throw err;
        (0, logger_1.globalWarn)(`Local dependency not found at ${dependencyLocation}`);
        // Sometimes the linked in local package does not exist during installation
        // and is created later via a build script.
        // That is why we create the symlink even if the target directory does not exist.
        dependencyRealLocation = dependencyLocation;
    }
    const dest = path_1.default.join(destModulesDirReal, importAs);
    const { reused } = await (0, symlink_dir_1.default)(dependencyRealLocation, dest);
    if (reused)
        return; // if the link was already present, don't log
    core_loggers_1.rootLogger.debug({
        added: {
            dependencyType: opts.fromDependenciesField && DEP_TYPE_BY_DEPS_FIELD_NAME[opts.fromDependenciesField],
            linkedFrom: dependencyRealLocation,
            name: importAs,
            realName: opts.linkedPackage.name,
            version: opts.linkedPackage.version,
        },
        prefix: opts.prefix,
    });
}
exports.symlinkDirectRootDependency = symlinkDirectRootDependency;
//# sourceMappingURL=symlinkDirectRootDependency.js.map