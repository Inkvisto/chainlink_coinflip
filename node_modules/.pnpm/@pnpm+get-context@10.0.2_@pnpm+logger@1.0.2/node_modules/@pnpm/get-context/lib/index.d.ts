import { type Lockfile } from '@pnpm/lockfile-file';
import { type IncludedDependencies, type Modules } from '@pnpm/modules-yaml';
import { type HoistedDependencies, type ProjectManifest, type ReadPackageHook, type Registries } from '@pnpm/types';
import { UnexpectedStoreError } from './checkCompatibility/UnexpectedStoreError';
import { UnexpectedVirtualStoreDirError } from './checkCompatibility/UnexpectedVirtualStoreDirError';
export { UnexpectedStoreError, UnexpectedVirtualStoreDirError };
export interface PnpmContext {
    currentLockfile: Lockfile;
    currentLockfileIsUpToDate: boolean;
    existsCurrentLockfile: boolean;
    existsWantedLockfile: boolean;
    existsNonEmptyWantedLockfile: boolean;
    extraBinPaths: string[];
    extraNodePaths: string[];
    lockfileHadConflicts: boolean;
    hoistedDependencies: HoistedDependencies;
    include: IncludedDependencies;
    modulesFile: Modules | null;
    pendingBuilds: string[];
    projects: Record<string, {
        modulesDir: string;
        id: string;
    } & HookOptions & Required<ProjectOptions>>;
    rootModulesDir: string;
    hoistPattern: string[] | undefined;
    hoistedModulesDir: string;
    publicHoistPattern: string[] | undefined;
    lockfileDir: string;
    virtualStoreDir: string;
    skipped: Set<string>;
    storeDir: string;
    wantedLockfile: Lockfile;
    wantedLockfileIsModified: boolean;
    registries: Registries;
}
export interface ProjectOptions {
    buildIndex: number;
    binsDir?: string;
    manifest: ProjectManifest;
    modulesDir?: string;
    rootDir: string;
}
interface HookOptions {
    originalManifest?: ProjectManifest;
}
export interface GetContextOptions {
    autoInstallPeers: boolean;
    excludeLinksFromLockfile: boolean;
    allProjects: Array<ProjectOptions & HookOptions>;
    confirmModulesPurge?: boolean;
    force: boolean;
    forceNewModules?: boolean;
    forceSharedLockfile: boolean;
    frozenLockfile?: boolean;
    extraBinPaths: string[];
    extendNodePath?: boolean;
    lockfileDir: string;
    modulesDir?: string;
    nodeLinker: 'isolated' | 'hoisted' | 'pnp';
    readPackageHook?: ReadPackageHook;
    include?: IncludedDependencies;
    registries: Registries;
    storeDir: string;
    useLockfile: boolean;
    useGitBranchLockfile?: boolean;
    mergeGitBranchLockfiles?: boolean;
    virtualStoreDir?: string;
    hoistPattern?: string[] | undefined;
    forceHoistPattern?: boolean;
    publicHoistPattern?: string[] | undefined;
    forcePublicHoistPattern?: boolean;
    global?: boolean;
}
export declare function getContext(opts: GetContextOptions): Promise<PnpmContext>;
export interface PnpmSingleContext {
    currentLockfile: Lockfile;
    currentLockfileIsUpToDate: boolean;
    existsCurrentLockfile: boolean;
    existsWantedLockfile: boolean;
    existsNonEmptyWantedLockfile: boolean;
    extraBinPaths: string[];
    extraNodePaths: string[];
    lockfileHadConflicts: boolean;
    hoistedDependencies: HoistedDependencies;
    hoistedModulesDir: string;
    hoistPattern: string[] | undefined;
    manifest: ProjectManifest;
    modulesDir: string;
    importerId: string;
    prefix: string;
    include: IncludedDependencies;
    modulesFile: Modules | null;
    pendingBuilds: string[];
    publicHoistPattern: string[] | undefined;
    registries: Registries;
    rootModulesDir: string;
    lockfileDir: string;
    virtualStoreDir: string;
    skipped: Set<string>;
    storeDir: string;
    wantedLockfile: Lockfile;
    wantedLockfileIsModified: boolean;
}
export declare function getContextForSingleImporter(manifest: ProjectManifest, opts: {
    autoInstallPeers: boolean;
    excludeLinksFromLockfile: boolean;
    force: boolean;
    forceNewModules?: boolean;
    forceSharedLockfile: boolean;
    confirmModulesPurge?: boolean;
    extraBinPaths: string[];
    extendNodePath?: boolean;
    lockfileDir: string;
    nodeLinker: 'isolated' | 'hoisted' | 'pnp';
    modulesDir?: string;
    readPackageHook?: ReadPackageHook;
    include?: IncludedDependencies;
    dir: string;
    registries: Registries;
    storeDir: string;
    useLockfile: boolean;
    useGitBranchLockfile?: boolean;
    mergeGitBranchLockfiles?: boolean;
    virtualStoreDir?: string;
    hoistPattern?: string[] | undefined;
    forceHoistPattern?: boolean;
    publicHoistPattern?: string[] | undefined;
    forcePublicHoistPattern?: boolean;
}, alreadyPurged?: boolean): Promise<PnpmSingleContext>;
