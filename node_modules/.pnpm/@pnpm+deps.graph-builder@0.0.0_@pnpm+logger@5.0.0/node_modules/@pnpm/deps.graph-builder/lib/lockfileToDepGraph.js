"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lockfileToDepGraph = void 0;
const path_1 = __importDefault(require("path"));
const constants_1 = require("@pnpm/constants");
const core_loggers_1 = require("@pnpm/core-loggers");
const lockfile_utils_1 = require("@pnpm/lockfile-utils");
const logger_1 = require("@pnpm/logger");
const package_is_installable_1 = require("@pnpm/package-is-installable");
const dp = __importStar(require("@pnpm/dependency-path"));
const path_exists_1 = __importDefault(require("path-exists"));
const equals_1 = __importDefault(require("ramda/src/equals"));
const brokenModulesLogger = (0, logger_1.logger)('_broken_node_modules');
async function lockfileToDepGraph(lockfile, currentLockfile, opts) {
    const currentPackages = currentLockfile?.packages ?? {};
    const graph = {};
    const directDependenciesByImporterId = {};
    if (lockfile.packages != null) {
        const pkgSnapshotByLocation = {};
        await Promise.all(Object.entries(lockfile.packages).map(async ([depPath, pkgSnapshot]) => {
            if (opts.skipped.has(depPath))
                return;
            // TODO: optimize. This info can be already returned by pkgSnapshotToResolution()
            const { name: pkgName, version: pkgVersion } = (0, lockfile_utils_1.nameVerFromPkgSnapshot)(depPath, pkgSnapshot);
            const modules = path_1.default.join(opts.virtualStoreDir, dp.depPathToFilename(depPath), 'node_modules');
            const packageId = (0, lockfile_utils_1.packageIdFromSnapshot)(depPath, pkgSnapshot, opts.registries);
            const pkg = {
                name: pkgName,
                version: pkgVersion,
                engines: pkgSnapshot.engines,
                cpu: pkgSnapshot.cpu,
                os: pkgSnapshot.os,
                libc: pkgSnapshot.libc,
            };
            if (!opts.force &&
                (0, package_is_installable_1.packageIsInstallable)(packageId, pkg, {
                    engineStrict: opts.engineStrict,
                    lockfileDir: opts.lockfileDir,
                    nodeVersion: opts.nodeVersion,
                    optional: pkgSnapshot.optional === true,
                    pnpmVersion: opts.pnpmVersion,
                }) === false) {
                opts.skipped.add(depPath);
                return;
            }
            const dir = path_1.default.join(modules, pkgName);
            if (!(0, lockfile_utils_1.refIsLocalDirectory)(depPath) &&
                currentPackages[depPath] && (0, equals_1.default)(currentPackages[depPath].dependencies, lockfile.packages[depPath].dependencies) &&
                (0, equals_1.default)(currentPackages[depPath].optionalDependencies, lockfile.packages[depPath].optionalDependencies)) {
                if (await (0, path_exists_1.default)(dir)) {
                    return;
                }
                brokenModulesLogger.debug({
                    missing: dir,
                });
            }
            const resolution = (0, lockfile_utils_1.pkgSnapshotToResolution)(depPath, pkgSnapshot, opts.registries);
            core_loggers_1.progressLogger.debug({
                packageId,
                requester: opts.lockfileDir,
                status: 'resolved',
            });
            let fetchResponse;
            try {
                fetchResponse = opts.storeController.fetchPackage({
                    force: false,
                    lockfileDir: opts.lockfileDir,
                    ignoreScripts: opts.ignoreScripts,
                    pkg: {
                        id: packageId,
                        resolution,
                    },
                    expectedPkg: {
                        name: pkgName,
                        version: pkgVersion,
                    },
                });
                if (fetchResponse instanceof Promise)
                    fetchResponse = await fetchResponse;
            }
            catch (err) { // eslint-disable-line
                if (pkgSnapshot.optional)
                    return;
                throw err;
            }
            graph[dir] = {
                children: {},
                depPath,
                dir,
                fetchingFiles: fetchResponse.files,
                filesIndexFile: fetchResponse.filesIndexFile,
                finishing: fetchResponse.finishing,
                hasBin: pkgSnapshot.hasBin === true,
                hasBundledDependencies: pkgSnapshot.bundledDependencies != null,
                modules,
                name: pkgName,
                optional: !!pkgSnapshot.optional,
                optionalDependencies: new Set(Object.keys(pkgSnapshot.optionalDependencies ?? {})),
                prepare: pkgSnapshot.prepare === true,
                requiresBuild: pkgSnapshot.requiresBuild === true,
                patchFile: opts.patchedDependencies?.[`${pkgName}@${pkgVersion}`],
            };
            pkgSnapshotByLocation[dir] = pkgSnapshot;
        }));
        const ctx = {
            force: opts.force,
            graph,
            lockfileDir: opts.lockfileDir,
            pkgSnapshotsByDepPaths: lockfile.packages,
            registries: opts.registries,
            sideEffectsCacheRead: opts.sideEffectsCacheRead,
            skipped: opts.skipped,
            storeController: opts.storeController,
            storeDir: opts.storeDir,
            virtualStoreDir: opts.virtualStoreDir,
        };
        for (const [dir, node] of Object.entries(graph)) {
            const pkgSnapshot = pkgSnapshotByLocation[dir];
            const allDeps = {
                ...pkgSnapshot.dependencies,
                ...(opts.include.optionalDependencies ? pkgSnapshot.optionalDependencies : {}),
            };
            const peerDeps = pkgSnapshot.peerDependencies ? new Set(Object.keys(pkgSnapshot.peerDependencies)) : null;
            node.children = getChildrenPaths(ctx, allDeps, peerDeps, '.');
        }
        for (const importerId of opts.importerIds) {
            const projectSnapshot = lockfile.importers[importerId];
            const rootDeps = {
                ...(opts.include.devDependencies ? projectSnapshot.devDependencies : {}),
                ...(opts.include.dependencies ? projectSnapshot.dependencies : {}),
                ...(opts.include.optionalDependencies ? projectSnapshot.optionalDependencies : {}),
            };
            directDependenciesByImporterId[importerId] = getChildrenPaths(ctx, rootDeps, null, importerId);
        }
    }
    return { graph, directDependenciesByImporterId };
}
exports.lockfileToDepGraph = lockfileToDepGraph;
function getChildrenPaths(ctx, allDeps, peerDeps, importerId) {
    const children = {};
    for (const [alias, ref] of Object.entries(allDeps)) {
        const childDepPath = dp.refToAbsolute(ref, alias, ctx.registries);
        if (childDepPath === null) {
            children[alias] = path_1.default.resolve(ctx.lockfileDir, importerId, ref.slice(5));
            continue;
        }
        const childRelDepPath = dp.refToRelative(ref, alias);
        const childPkgSnapshot = ctx.pkgSnapshotsByDepPaths[childRelDepPath];
        if (ctx.graph[childRelDepPath]) {
            children[alias] = ctx.graph[childRelDepPath].dir;
        }
        else if (childPkgSnapshot) {
            if (ctx.skipped.has(childRelDepPath))
                continue;
            const pkgName = (0, lockfile_utils_1.nameVerFromPkgSnapshot)(childRelDepPath, childPkgSnapshot).name;
            children[alias] = path_1.default.join(ctx.virtualStoreDir, dp.depPathToFilename(childRelDepPath), 'node_modules', pkgName);
        }
        else if (ref.indexOf('file:') === 0) {
            children[alias] = path_1.default.resolve(ctx.lockfileDir, ref.slice(5));
        }
        else if (!ctx.skipped.has(childRelDepPath) && ((peerDeps == null) || !peerDeps.has(alias))) {
            throw new Error(`${childRelDepPath} not found in ${constants_1.WANTED_LOCKFILE}`);
        }
    }
    return children;
}
//# sourceMappingURL=lockfileToDepGraph.js.map