"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBinsFromPackageManifest = void 0;
const path_1 = __importDefault(require("path"));
const fast_glob_1 = __importDefault(require("fast-glob"));
const is_subdir_1 = __importDefault(require("is-subdir"));
async function getBinsFromPackageManifest(manifest, pkgPath) {
    if (manifest.bin) {
        return commandsFromBin(manifest.bin, manifest.name, pkgPath);
    }
    if (manifest.directories?.bin) {
        const binDir = path_1.default.join(pkgPath, manifest.directories.bin);
        const files = await findFiles(binDir);
        return files.map((file) => ({
            name: path_1.default.basename(file),
            path: path_1.default.join(binDir, file),
        }));
    }
    return [];
}
exports.getBinsFromPackageManifest = getBinsFromPackageManifest;
async function findFiles(dir) {
    try {
        return await (0, fast_glob_1.default)('**', {
            cwd: dir,
            onlyFiles: true,
            followSymbolicLinks: false,
        });
    }
    catch (err) { // eslint-disable-line
        if (err.code !== 'ENOENT') {
            throw err;
        }
        return [];
    }
}
function commandsFromBin(bin, pkgName, pkgPath) {
    if (typeof bin === 'string') {
        return [
            {
                name: pkgName.startsWith('@') ? pkgName.slice(pkgName.indexOf('/') + 1) : pkgName,
                path: path_1.default.join(pkgPath, bin),
            },
        ];
    }
    return Object.keys(bin)
        .filter((commandName) => encodeURIComponent(commandName) === commandName || commandName === '$')
        .map((commandName) => ({
        name: commandName,
        path: path_1.default.join(pkgPath, bin[commandName]),
    }))
        .filter((cmd) => (0, is_subdir_1.default)(pkgPath, cmd.path));
}
//# sourceMappingURL=index.js.map