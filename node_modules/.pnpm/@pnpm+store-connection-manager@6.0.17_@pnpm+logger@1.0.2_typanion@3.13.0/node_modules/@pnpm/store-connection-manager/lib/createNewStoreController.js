"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNewStoreController = void 0;
const fs_1 = require("fs");
const client_1 = require("@pnpm/client");
const package_store_1 = require("@pnpm/package-store");
const cli_meta_1 = require("@pnpm/cli-meta");
async function createNewStoreController(opts) {
    const fullMetadata = opts.resolutionMode === 'time-based' && !opts.registrySupportsTimeField;
    const { resolve, fetchers } = (0, client_1.createClient)({
        customFetchers: opts.hooks?.fetchers,
        userConfig: opts.userConfig,
        unsafePerm: opts.unsafePerm,
        authConfig: opts.rawConfig,
        ca: opts.ca,
        cacheDir: opts.cacheDir,
        cert: opts.cert,
        fullMetadata,
        filterMetadata: fullMetadata,
        httpProxy: opts.httpProxy,
        httpsProxy: opts.httpsProxy,
        ignoreScripts: opts.ignoreScripts,
        key: opts.key,
        localAddress: opts.localAddress,
        noProxy: opts.noProxy,
        offline: opts.offline,
        preferOffline: opts.preferOffline,
        rawConfig: opts.rawConfig,
        retry: {
            factor: opts.fetchRetryFactor,
            maxTimeout: opts.fetchRetryMaxtimeout,
            minTimeout: opts.fetchRetryMintimeout,
            retries: opts.fetchRetries,
        },
        strictSsl: opts.strictSsl ?? true,
        timeout: opts.fetchTimeout,
        userAgent: opts.userAgent,
        maxSockets: opts.maxSockets ?? (opts.networkConcurrency != null
            ? (opts.networkConcurrency * 3)
            : undefined),
        gitShallowHosts: opts.gitShallowHosts,
        resolveSymlinksInInjectedDirs: opts.resolveSymlinksInInjectedDirs,
        includeOnlyPackageFiles: !opts.deployAllFiles,
    });
    await fs_1.promises.mkdir(opts.storeDir, { recursive: true });
    return {
        ctrl: await (0, package_store_1.createPackageStore)(resolve, fetchers, {
            engineStrict: opts.engineStrict,
            force: opts.force,
            nodeVersion: opts.nodeVersion,
            pnpmVersion: cli_meta_1.packageManager.version,
            ignoreFile: opts.ignoreFile,
            importPackage: opts.hooks?.importPackage,
            networkConcurrency: opts.networkConcurrency,
            packageImportMethod: opts.packageImportMethod,
            cacheDir: opts.cacheDir,
            storeDir: opts.storeDir,
            verifyStoreIntegrity: typeof opts.verifyStoreIntegrity === 'boolean'
                ? opts.verifyStoreIntegrity
                : true,
        }),
        dir: opts.storeDir,
    };
}
exports.createNewStoreController = createNewStoreController;
//# sourceMappingURL=createNewStoreController.js.map