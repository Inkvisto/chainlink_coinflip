import { type ClientOptions } from '@pnpm/client';
import { type Config } from '@pnpm/config';
type CreateResolverOptions = Pick<Config, 'fetchRetries' | 'fetchRetryFactor' | 'fetchRetryMaxtimeout' | 'fetchRetryMintimeout' | 'offline' | 'rawConfig' | 'verifyStoreIntegrity'> & Required<Pick<Config, 'cacheDir' | 'storeDir'>>;
export type CreateNewStoreControllerOptions = CreateResolverOptions & Pick<Config, 'ca' | 'cert' | 'engineStrict' | 'force' | 'nodeVersion' | 'fetchTimeout' | 'gitShallowHosts' | 'ignoreScripts' | 'hooks' | 'httpProxy' | 'httpsProxy' | 'key' | 'localAddress' | 'maxSockets' | 'networkConcurrency' | 'noProxy' | 'offline' | 'packageImportMethod' | 'preferOffline' | 'registry' | 'registrySupportsTimeField' | 'resolutionMode' | 'strictSsl' | 'unsafePerm' | 'userAgent' | 'verifyStoreIntegrity'> & {
    ignoreFile?: (filename: string) => boolean;
} & Partial<Pick<Config, 'userConfig' | 'deployAllFiles'>> & Pick<ClientOptions, 'resolveSymlinksInInjectedDirs'>;
export declare function createNewStoreController(opts: CreateNewStoreControllerOptions): Promise<{
    ctrl: import("@pnpm/package-store").StoreController;
    dir: string;
}>;
export {};
