"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hoist = void 0;
const error_1 = require("@pnpm/error");
const lockfile_utils_1 = require("@pnpm/lockfile-utils");
const dp = __importStar(require("@pnpm/dependency-path"));
const nm_1 = require("@yarnpkg/nm");
function hoist(lockfile, opts) {
    const nodes = new Map();
    const node = {
        name: '.',
        identName: '.',
        reference: '',
        peerNames: new Set([]),
        dependencyKind: nm_1.HoisterDependencyKind.WORKSPACE,
        dependencies: toTree(nodes, lockfile, {
            ...lockfile.importers['.']?.dependencies,
            ...lockfile.importers['.']?.devDependencies,
            ...lockfile.importers['.']?.optionalDependencies,
            ...(Array.from(opts?.externalDependencies ?? [])).reduce((acc, dep) => {
                // It doesn't matter what version spec is used here.
                // This dependency will be removed from the tree anyway.
                // It is only needed to prevent the hoister from hoisting deps with this name to the root of node_modules.
                acc[dep] = 'link:';
                return acc;
            }, {}),
        }, opts?.autoInstallPeers),
    };
    for (const [importerId, importer] of Object.entries(lockfile.importers)) {
        if (importerId === '.')
            continue;
        const importerNode = {
            name: encodeURIComponent(importerId),
            identName: encodeURIComponent(importerId),
            reference: `workspace:${importerId}`,
            peerNames: new Set([]),
            dependencyKind: nm_1.HoisterDependencyKind.WORKSPACE,
            dependencies: toTree(nodes, lockfile, {
                ...importer.dependencies,
                ...importer.devDependencies,
                ...importer.optionalDependencies,
            }, opts?.autoInstallPeers),
        };
        node.dependencies.add(importerNode);
    }
    const hoisterResult = (0, nm_1.hoist)(node, opts);
    if (opts?.externalDependencies) {
        for (const hoistedDep of hoisterResult.dependencies.values()) {
            if (opts.externalDependencies.has(hoistedDep.name)) {
                hoisterResult.dependencies.delete(hoistedDep);
            }
        }
    }
    return hoisterResult;
}
exports.hoist = hoist;
function toTree(nodes, lockfile, deps, autoInstallPeers) {
    return new Set(Object.entries(deps).map(([alias, ref]) => {
        const depPath = dp.refToRelative(ref, alias);
        if (!depPath) {
            const key = `${alias}:${ref}`;
            let node = nodes.get(key);
            if (!node) {
                node = {
                    name: alias,
                    identName: alias,
                    reference: ref,
                    dependencyKind: nm_1.HoisterDependencyKind.REGULAR,
                    dependencies: new Set(),
                    peerNames: new Set(),
                };
                nodes.set(key, node);
            }
            return node;
        }
        const key = `${alias}:${depPath}`;
        let node = nodes.get(key);
        if (!node) {
            const pkgSnapshot = lockfile.packages[depPath];
            if (!pkgSnapshot) {
                throw new error_1.LockfileMissingDependencyError(depPath);
            }
            const pkgName = (0, lockfile_utils_1.nameVerFromPkgSnapshot)(depPath, pkgSnapshot).name;
            node = {
                name: alias,
                identName: pkgName,
                reference: depPath,
                dependencyKind: nm_1.HoisterDependencyKind.REGULAR,
                dependencies: new Set(),
                peerNames: new Set(autoInstallPeers
                    ? []
                    : [
                        ...Object.keys(pkgSnapshot.peerDependencies ?? {}),
                        ...(pkgSnapshot.transitivePeerDependencies ?? []),
                    ]),
            };
            nodes.set(key, node);
            node.dependencies = toTree(nodes, lockfile, { ...pkgSnapshot.dependencies, ...pkgSnapshot.optionalDependencies });
        }
        return node;
    }));
}
//# sourceMappingURL=index.js.map