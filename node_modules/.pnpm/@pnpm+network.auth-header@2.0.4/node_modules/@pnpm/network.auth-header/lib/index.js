"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGetAuthHeaderByURI = void 0;
const nerf_dart_1 = __importDefault(require("nerf-dart"));
const url_1 = require("url");
const getAuthHeadersFromConfig_1 = require("./getAuthHeadersFromConfig");
function createGetAuthHeaderByURI(opts) {
    const authHeaders = (0, getAuthHeadersFromConfig_1.getAuthHeadersFromConfig)({
        allSettings: opts.allSettings,
        userSettings: opts.userSettings ?? {},
    });
    if (Object.keys(authHeaders).length === 0)
        return () => undefined;
    return getAuthHeaderByURI.bind(null, authHeaders, getMaxParts(Object.keys(authHeaders)));
}
exports.createGetAuthHeaderByURI = createGetAuthHeaderByURI;
function getMaxParts(uris) {
    return uris.reduce((max, uri) => {
        const parts = uri.split('/').length;
        return parts > max ? parts : max;
    }, 0);
}
function getAuthHeaderByURI(authHeaders, maxParts, uri) {
    const nerfed = (0, nerf_dart_1.default)(uri);
    const parts = nerfed.split('/');
    for (let i = Math.min(parts.length, maxParts) - 1; i >= 3; i--) {
        const key = `${parts.slice(0, i).join('/')}/`; // eslint-disable-line
        if (authHeaders[key])
            return authHeaders[key];
    }
    const urlWithoutPort = removePort(uri);
    if (urlWithoutPort !== uri) {
        return getAuthHeaderByURI(authHeaders, maxParts, urlWithoutPort);
    }
    return undefined;
}
function removePort(originalUrl) {
    const urlObj = new url_1.URL(originalUrl);
    if (urlObj.port === '')
        return originalUrl;
    urlObj.port = '';
    return urlObj.toString();
}
//# sourceMappingURL=index.js.map