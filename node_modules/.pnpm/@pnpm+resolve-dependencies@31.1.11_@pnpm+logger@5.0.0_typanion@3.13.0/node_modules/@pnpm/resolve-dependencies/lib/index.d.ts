import { type Lockfile } from '@pnpm/lockfile-types';
import { type PinnedVersion } from '@pnpm/manifest-utils';
import { type DependenciesField, type ProjectManifest } from '@pnpm/types';
import { getWantedDependencies, type WantedDependency } from './getWantedDependencies';
import { type UpdateMatchingFunction } from './resolveDependencies';
import { type Importer, type LinkedDependency, type ResolveDependenciesOptions, type ResolvedPackage } from './resolveDependencyTree';
import { type GenericDependenciesGraph, type GenericDependenciesGraphNode } from './resolvePeers';
export type DependenciesGraph = GenericDependenciesGraph<ResolvedPackage>;
export type DependenciesGraphNode = GenericDependenciesGraphNode & ResolvedPackage;
export { getWantedDependencies, type LinkedDependency, type ResolvedPackage, type PinnedVersion, type UpdateMatchingFunction, type WantedDependency, };
export type ImporterToResolve = Importer<{
    isNew?: boolean;
    nodeExecPath?: string;
    pinnedVersion?: PinnedVersion;
    raw: string;
    updateSpec?: boolean;
    preserveNonSemverVersionSpec?: boolean;
}> & {
    peer?: boolean;
    pinnedVersion?: PinnedVersion;
    binsDir: string;
    manifest: ProjectManifest;
    originalManifest?: ProjectManifest;
    update?: boolean;
    updateMatching?: UpdateMatchingFunction;
    updatePackageManifest: boolean;
    targetDependenciesField?: DependenciesField;
};
export declare function resolveDependencies(importers: ImporterToResolve[], opts: ResolveDependenciesOptions & {
    defaultUpdateDepth: number;
    dedupePeerDependents?: boolean;
    excludeLinksFromLockfile?: boolean;
    preserveWorkspaceProtocol: boolean;
    saveWorkspaceProtocol: 'rolling' | boolean;
    lockfileIncludeTarballUrl?: boolean;
    allowNonAppliedPatches?: boolean;
}): Promise<{
    dependenciesByProjectId: {
        [id: string]: {
            [alias: string]: string;
        };
    };
    dependenciesGraph: GenericDependenciesGraph<ResolvedPackage>;
    finishLockfileUpdates: () => Promise<void[]>;
    outdatedDependencies: {
        [pkgId: string]: string;
    };
    linkedDependenciesByProjectId: Record<string, LinkedDependency[]>;
    newLockfile: Lockfile;
    peerDependencyIssuesByProjects: import("@pnpm/types").PeerDependencyIssuesByProjects;
    waitTillAllFetchingsFinish: () => Promise<void[]>;
    wantedToBeSkippedPackageIds: Set<string>;
}>;
