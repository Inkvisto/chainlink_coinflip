"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWantedDependencies = void 0;
const manifest_utils_1 = require("@pnpm/manifest-utils");
const which_version_is_pinned_1 = require("@pnpm/which-version-is-pinned");
function getWantedDependencies(pkg, opts) {
    let depsToInstall = (0, manifest_utils_1.filterDependenciesByType)(pkg, opts?.includeDirect ?? {
        dependencies: true,
        devDependencies: true,
        optionalDependencies: true,
    });
    if (opts?.autoInstallPeers) {
        depsToInstall = {
            ...pkg.peerDependencies,
            ...depsToInstall,
        };
    }
    return getWantedDependenciesFromGivenSet(depsToInstall, {
        dependencies: pkg.dependencies ?? {},
        devDependencies: pkg.devDependencies ?? {},
        optionalDependencies: pkg.optionalDependencies ?? {},
        dependenciesMeta: pkg.dependenciesMeta ?? {},
        peerDependencies: pkg.peerDependencies ?? {},
        updatePref: opts?.updateWorkspaceDependencies === true
            ? updateWorkspacePref
            : (pref) => pref,
    });
}
exports.getWantedDependencies = getWantedDependencies;
function updateWorkspacePref(pref) {
    return pref.startsWith('workspace:') ? 'workspace:*' : pref;
}
function getWantedDependenciesFromGivenSet(deps, opts) {
    if (!deps)
        return [];
    return Object.entries(deps).map(([alias, pref]) => {
        const updatedPref = opts.updatePref(pref);
        let depType;
        if (opts.optionalDependencies[alias] != null)
            depType = 'optional';
        else if (opts.dependencies[alias] != null)
            depType = 'prod';
        else if (opts.devDependencies[alias] != null)
            depType = 'dev';
        else if (opts.peerDependencies[alias] != null)
            depType = 'prod';
        return {
            alias,
            dev: depType === 'dev',
            injected: opts.dependenciesMeta[alias]?.injected,
            optional: depType === 'optional',
            nodeExecPath: opts.nodeExecPath ?? opts.dependenciesMeta[alias]?.node,
            pinnedVersion: (0, which_version_is_pinned_1.whichVersionIsPinned)(pref),
            pref: updatedPref,
            raw: `${alias}@${pref}`,
        };
    });
}
//# sourceMappingURL=getWantedDependencies.js.map