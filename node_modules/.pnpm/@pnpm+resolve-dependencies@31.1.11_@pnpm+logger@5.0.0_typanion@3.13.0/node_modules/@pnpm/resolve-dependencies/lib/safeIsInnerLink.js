"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeIsInnerLink = void 0;
const path_1 = __importDefault(require("path"));
const logger_1 = require("@pnpm/logger");
const is_inner_link_1 = __importDefault(require("is-inner-link"));
const is_subdir_1 = __importDefault(require("is-subdir"));
const rename_overwrite_1 = __importDefault(require("rename-overwrite"));
async function safeIsInnerLink(projectModulesDir, depName, opts) {
    try {
        const link = await (0, is_inner_link_1.default)(projectModulesDir, depName);
        if (link.isInner)
            return true;
        if ((0, is_subdir_1.default)(opts.virtualStoreDir, link.target))
            return true;
        return link.target;
    }
    catch (err) { // eslint-disable-line
        if (err.code === 'ENOENT')
            return true;
        if (opts.hideAlienModules) {
            logger_1.logger.warn({
                message: `Moving ${depName} that was installed by a different package manager to "node_modules/.ignored"`,
                prefix: opts.projectDir,
            });
            const ignoredDir = path_1.default.join(projectModulesDir, '.ignored', depName);
            await (0, rename_overwrite_1.default)(path_1.default.join(projectModulesDir, depName), ignoredDir);
        }
        return true;
    }
}
exports.safeIsInnerLink = safeIsInnerLink;
//# sourceMappingURL=safeIsInnerLink.js.map