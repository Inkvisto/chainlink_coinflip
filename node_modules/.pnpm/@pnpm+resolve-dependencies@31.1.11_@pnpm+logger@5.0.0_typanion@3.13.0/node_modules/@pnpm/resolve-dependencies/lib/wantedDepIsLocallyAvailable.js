"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wantedDepIsLocallyAvailable = void 0;
const npm_resolver_1 = require("@pnpm/npm-resolver");
const semver_1 = __importDefault(require("semver"));
function wantedDepIsLocallyAvailable(workspacePackages, wantedDependency, opts) {
    const spec = (0, npm_resolver_1.parsePref)(wantedDependency.pref, wantedDependency.alias, opts.defaultTag || 'latest', opts.registry);
    if ((spec == null) || !workspacePackages[spec.name])
        return false;
    return pickMatchingLocalVersionOrNull(workspacePackages[spec.name], spec) !== null;
}
exports.wantedDepIsLocallyAvailable = wantedDepIsLocallyAvailable;
// TODO: move this function to separate package or import from @pnpm/npm-resolver
function pickMatchingLocalVersionOrNull(versions, spec) {
    const localVersions = Object.keys(versions);
    switch (spec.type) {
        case 'tag':
            return semver_1.default.maxSatisfying(localVersions, '*');
        case 'version':
            return versions[spec.fetchSpec] ? spec.fetchSpec : null;
        case 'range':
            return semver_1.default.maxSatisfying(localVersions, spec.fetchSpec, true);
        default:
            return null;
    }
}
//# sourceMappingURL=wantedDepIsLocallyAvailable.js.map