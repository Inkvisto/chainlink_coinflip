"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lockfileToDepGraph = exports.calcDepState = void 0;
const constants_1 = require("@pnpm/constants");
const dependency_path_1 = require("@pnpm/dependency-path");
const sort_keys_1 = __importDefault(require("sort-keys"));
function calcDepState(depsGraph, cache, depPath, opts) {
    let result = constants_1.ENGINE_NAME;
    if (opts.isBuilt) {
        const depStateObj = calcDepStateObj(depPath, depsGraph, cache, new Set());
        result += `-${JSON.stringify(depStateObj)}`;
    }
    if (opts.patchFileHash) {
        result += `-${opts.patchFileHash}`;
    }
    return result;
}
exports.calcDepState = calcDepState;
function calcDepStateObj(depPath, depsGraph, cache, parents) {
    if (cache[depPath])
        return cache[depPath];
    const node = depsGraph[depPath];
    if (!node)
        return {};
    const nextParents = new Set([...Array.from(parents), node.depPath]);
    const state = {};
    for (const childId of Object.values(node.children)) {
        const child = depsGraph[childId];
        if (!child)
            continue;
        if (parents.has(child.depPath)) {
            state[child.depPath] = {};
            continue;
        }
        state[child.depPath] = calcDepStateObj(childId, depsGraph, cache, nextParents);
    }
    cache[depPath] = (0, sort_keys_1.default)(state);
    return cache[depPath];
}
function lockfileToDepGraph(lockfile) {
    const graph = {};
    if (lockfile.packages != null) {
        Object.entries(lockfile.packages).map(async ([depPath, pkgSnapshot]) => {
            const children = lockfileDepsToGraphChildren({
                ...pkgSnapshot.dependencies,
                ...pkgSnapshot.optionalDependencies,
            });
            graph[depPath] = {
                children,
                depPath,
            };
        });
    }
    return graph;
}
exports.lockfileToDepGraph = lockfileToDepGraph;
function lockfileDepsToGraphChildren(deps) {
    const children = {};
    for (const [alias, reference] of Object.entries(deps)) {
        const depPath = (0, dependency_path_1.refToRelative)(reference, alias);
        if (depPath) {
            children[alias] = depPath;
        }
    }
    return children;
}
//# sourceMappingURL=index.js.map