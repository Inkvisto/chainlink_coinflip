import { type Lockfile, type PatchFile } from '@pnpm/lockfile-file';
import { type LogBase } from '@pnpm/logger';
import { type IncludedDependencies } from '@pnpm/modules-yaml';
import { type HoistingLimits } from '@pnpm/real-hoist';
import { type StoreController } from '@pnpm/store-controller-types';
import { type HoistedDependencies, type ProjectManifest, type Registries } from '@pnpm/types';
export type { HoistingLimits };
export type ReporterFunction = (logObj: LogBase) => void;
export interface Project {
    binsDir: string;
    buildIndex: number;
    manifest: ProjectManifest;
    modulesDir: string;
    id: string;
    pruneDirectDependencies?: boolean;
    rootDir: string;
}
export interface HeadlessOptions {
    autoInstallPeers?: boolean;
    childConcurrency?: number;
    currentLockfile?: Lockfile;
    currentEngine: {
        nodeVersion: string;
        pnpmVersion: string;
    };
    dedupeDirectDeps?: boolean;
    enablePnp?: boolean;
    engineStrict: boolean;
    excludeLinksFromLockfile?: boolean;
    extraBinPaths?: string[];
    extraEnv?: Record<string, string>;
    extraNodePaths?: string[];
    preferSymlinkedExecutables?: boolean;
    hoistingLimits?: HoistingLimits;
    externalDependencies?: Set<string>;
    ignoreDepScripts: boolean;
    ignoreScripts: boolean;
    ignorePackageManifest?: boolean;
    include: IncludedDependencies;
    selectedProjectDirs: string[];
    allProjects: Record<string, Project>;
    prunedAt?: string;
    hoistedDependencies: HoistedDependencies;
    hoistPattern?: string[];
    publicHoistPattern?: string[];
    currentHoistedLocations?: Record<string, string[]>;
    lockfileDir: string;
    modulesDir?: string;
    virtualStoreDir?: string;
    patchedDependencies?: Record<string, PatchFile>;
    scriptsPrependNodePath?: boolean | 'warn-only';
    scriptShell?: string;
    shellEmulator?: boolean;
    storeController: StoreController;
    sideEffectsCacheRead: boolean;
    sideEffectsCacheWrite: boolean;
    symlink?: boolean;
    force: boolean;
    storeDir: string;
    rawConfig: object;
    unsafePerm: boolean;
    userAgent: string;
    registries: Registries;
    reporter?: ReporterFunction;
    packageManager: {
        name: string;
        version: string;
    };
    pruneStore: boolean;
    pruneVirtualStore?: boolean;
    wantedLockfile?: Lockfile;
    ownLifecycleHooksStdio?: 'inherit' | 'pipe';
    pendingBuilds: string[];
    resolveSymlinksInInjectedDirs?: boolean;
    skipped: Set<string>;
    enableModulesDir?: boolean;
    nodeLinker?: 'isolated' | 'hoisted' | 'pnp';
    useGitBranchLockfile?: boolean;
    useLockfile?: boolean;
}
export interface InstallationResultStats {
    added: number;
    removed: number;
    linkedToRoot: number;
}
export interface InstallationResult {
    stats: InstallationResultStats;
}
export declare function headlessInstall(opts: HeadlessOptions): Promise<InstallationResult>;
