import semver from 'semver';
export declare function isNotNull<T>(value: T | null): value is T;
export declare function uniqueArray<T>(array: readonly T[]): readonly T[];
export declare function isNoIncludeNull<T>(value: readonly (T | null)[]): value is readonly T[];
export declare function isPrerelease(version: semver.SemVer | {}): boolean;
export declare function isValidOperator(comparator: semver.Comparator, operatorList: readonly semver.Comparator['operator'][]): boolean;
export declare function equalComparator(comparatorA: semver.Comparator, comparatorB: semver.Comparator): boolean;
export declare function comparator2versionStr(comparator: semver.Comparator): string;
export declare function isSameVersionEqualsLikeComparator(comparatorA: semver.Comparator, comparatorB: semver.Comparator): boolean;
export declare function isEqualsComparator(comparator: semver.Comparator): boolean;
export declare function filterUniqueComparator(comparator: semver.Comparator, index: number, self: readonly semver.Comparator[]): boolean;
export declare function filterOperator(operatorList: readonly semver.Comparator['operator'][]): (comparator: semver.Comparator) => boolean;
export declare function isIntersectRanges(semverRangeList: readonly semver.Range[]): boolean;
export declare function stripSemVerPrerelease(semverVersion: semver.SemVer | {}): string;
export declare function stripComparatorOperator(comparator: semver.Comparator): semver.Comparator;
export declare function getLowerBoundComparator(comparatorList: readonly semver.Comparator[], options?: {
    singleRange?: boolean;
}): semver.Comparator;
export declare function getUpperBoundComparator(comparatorList: readonly semver.Comparator[], options?: {
    singleRange?: boolean;
}): semver.Comparator;
//# sourceMappingURL=utils.d.ts.map