import semver from 'semver';
export interface SingleRangeInterface {
    toString(): string;
    intersect(singleRange: SingleVer | SingleRange): SingleVer | SingleRange | null;
    merge(singleRange: SingleVer | SingleRange): SingleVer | SingleRange | null;
}
export declare class SingleVer implements SingleRangeInterface {
    comp: semver.Comparator;
    constructor(comp: semver.Comparator);
    toString(): string;
    intersect(singleRange: SingleVer | SingleRange): SingleVer | null;
    merge(singleRange: SingleVer | SingleRange): SingleVer | SingleRange | null;
}
export declare class SingleRange implements SingleRangeInterface {
    lowerBound: semver.Comparator;
    upperBound: semver.Comparator;
    constructor(lowerBound: semver.Comparator, upperBound: semver.Comparator);
    toString(): string;
    intersect(singleRange: SingleVer | SingleRange): SingleVer | SingleRange | null;
    merge(singleRange: SingleVer | SingleRange): SingleVer | SingleRange | null;
}
export declare function createSingleRange(comparatorList: readonly semver.Comparator[]): SingleVer | SingleRange | null;
export declare function isSingleRange(value: unknown): value is SingleVer | SingleRange;
//# sourceMappingURL=single-range.d.ts.map