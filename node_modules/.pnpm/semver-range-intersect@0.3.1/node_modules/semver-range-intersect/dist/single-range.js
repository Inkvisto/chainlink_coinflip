"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(require("semver"));
const utils_1 = require("./utils");
class SingleVer {
    constructor(comp) {
        this.comp = comp;
    }
    toString() {
        return this.comp.value;
    }
    intersect(singleRange) {
        if (semver_1.default.intersects(String(this), String(singleRange))) {
            return this;
        }
        else {
            return null;
        }
    }
    merge(singleRange) {
        if (semver_1.default.intersects(String(this), String(singleRange))) {
            return singleRange;
        }
        return null;
    }
}
exports.SingleVer = SingleVer;
class SingleRange {
    constructor(lowerBound, upperBound) {
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
        if (!lowerBound.intersects(upperBound)) {
            throw new Error(`Invalid range; version range does not intersect: ${this}`);
        }
    }
    toString() {
        return [this.lowerBound.value, this.upperBound.value]
            .filter(v => v !== '')
            .join(' ');
    }
    intersect(singleRange) {
        if (semver_1.default.intersects(String(this), String(singleRange))) {
            if (singleRange instanceof SingleVer) {
                return singleRange;
            }
            else {
                const lowerBoundComparatorList = [
                    this.lowerBound,
                    singleRange.lowerBound,
                ];
                const upperBoundComparatorList = [
                    this.upperBound,
                    singleRange.upperBound,
                ];
                const lowerBound = utils_1.getLowerBoundComparator([
                    ...lowerBoundComparatorList,
                    ...upperBoundComparatorList.filter(comparator => comparator.semver instanceof semver_1.default.SemVer),
                ]);
                const upperBound = utils_1.getUpperBoundComparator([
                    ...upperBoundComparatorList,
                    ...lowerBoundComparatorList.filter(comparator => comparator.semver instanceof semver_1.default.SemVer),
                ]);
                if (utils_1.isSameVersionEqualsLikeComparator(lowerBound, upperBound)) {
                    return new SingleVer(utils_1.stripComparatorOperator(lowerBound));
                }
                return new SingleRange(lowerBound, upperBound);
            }
        }
        else {
            // Invalid range
            return null;
        }
    }
    merge(singleRange) {
        if (semver_1.default.intersects(String(this), String(singleRange))) {
            if (singleRange instanceof SingleVer) {
                return this;
            }
            else {
                const lowerBound = ((a, b) => {
                    const semverA = a.semver;
                    const semverB = b.semver;
                    // >2.0.0      / *           ... *
                    // >2.0.0-pre  / *           ... null
                    // >=2.0.0     / *           ... *
                    // >=2.0.0-pre / *           ... null
                    // *           / >2.0.0      ... *
                    // *           / >2.0.0-pre  ... null
                    // *           / >=2.0.0     ... *
                    // *           / >=2.0.0-pre ... null
                    // *           / *           ... *
                    if (!(semverA instanceof semver_1.default.SemVer)) {
                        if (utils_1.isPrerelease(semverB)) {
                            return null;
                        }
                        return a;
                    }
                    else if (!(semverB instanceof semver_1.default.SemVer)) {
                        if (utils_1.isPrerelease(semverA)) {
                            return null;
                        }
                        return b;
                    }
                    // >=1.2.3-alpha / >=1.2.4-alpha ... null
                    // >=1.2.3       / >=1.2.4-alpha ... null
                    // >=1.9.0-pre   / >=0.0.0       ... null
                    const cmpMain = semverA.compareMain(semverB);
                    if ((cmpMain < 0 && utils_1.isPrerelease(semverB)) ||
                        (cmpMain > 0 && utils_1.isPrerelease(semverA))) {
                        return null;
                    }
                    const semverCmp = semver_1.default.compare(semverA, semverB);
                    if (a.operator === b.operator || semverCmp !== 0) {
                        // >2.0.0  / >3.0.0  ... >2.0.0
                        // >=1.0.0 / >=1.1.0 ... >=1.0.0
                        // >2.0.0  / >=2.0.1 ... >2.0.0
                        // >=2.0.1 / >2.0.0  ... >2.0.0
                        // >2.0.1  / >=2.0.0 ... >=2.0.0
                        // >=2.0.0 / >2.0.1  ... >=2.0.0
                        if (semverCmp < 0) {
                            return a;
                        }
                        else {
                            return b;
                        }
                    }
                    else {
                        // >2.0.0  / >=2.0.0 ... >=2.0.0
                        // >=2.0.0 / >2.0.0  ... >=2.0.0
                        if (a.operator === '>=') {
                            return a;
                        }
                        else {
                            return b;
                        }
                    }
                })(this.lowerBound, singleRange.lowerBound);
                const upperBound = ((a, b) => {
                    const semverA = a.semver;
                    const semverB = b.semver;
                    // <2.0.0      / *           ... *
                    // <2.0.0-pre  / *           ... null
                    // <=2.0.0     / *           ... *
                    // <=2.0.0-pre / *           ... null
                    // *           / <2.0.0      ... *
                    // *           / <2.0.0-pre  ... null
                    // *           / <=2.0.0     ... *
                    // *           / <=2.0.0-pre ... null
                    // *           / *           ... *
                    if (!(semverA instanceof semver_1.default.SemVer)) {
                        if (utils_1.isPrerelease(semverB)) {
                            return null;
                        }
                        return a;
                    }
                    else if (!(semverB instanceof semver_1.default.SemVer)) {
                        if (utils_1.isPrerelease(semverA)) {
                            return null;
                        }
                        return b;
                    }
                    // <=1.2.3-alpha / <=1.2.4-alpha ... null
                    // <=1.2.3-alpha / <=1.2.4       ... null
                    const cmpMain = semverA.compareMain(semverB);
                    if ((cmpMain > 0 && utils_1.isPrerelease(semverB)) ||
                        (cmpMain < 0 && utils_1.isPrerelease(semverA))) {
                        return null;
                    }
                    const semverCmp = semver_1.default.compare(semverA, semverB);
                    if (a.operator === b.operator || semverCmp !== 0) {
                        // <2.0.0  / <3.0.0  ... <3.0.0
                        // <=1.0.0 / <=1.1.0 ... <=1.1.0
                        // <2.0.0  / <=2.0.1 ... <=2.0.1
                        // <=2.0.1 / <2.0.0  ... <=2.0.1
                        // <2.0.1  / <=2.0.0 ... <2.0.1
                        // <=2.0.0 / <2.0.1  ... <2.0.1
                        if (semverCmp > 0) {
                            return a;
                        }
                        else {
                            return b;
                        }
                    }
                    else {
                        // <2.0.0  / <=2.0.0 ... <=2.0.0
                        // <=2.0.0 / <2.0.0  ... <=2.0.0
                        if (a.operator === '<=') {
                            return a;
                        }
                        else {
                            return b;
                        }
                    }
                })(this.upperBound, singleRange.upperBound);
                if (lowerBound && upperBound) {
                    return new SingleRange(lowerBound, upperBound);
                }
            }
        }
        return null;
    }
}
exports.SingleRange = SingleRange;
function createSingleRange(comparatorList) {
    const equalsComparatorList = comparatorList
        .filter(utils_1.isEqualsComparator)
        .filter(utils_1.filterUniqueComparator);
    switch (equalsComparatorList.length) {
        case 0: {
            const lowerBound = utils_1.getLowerBoundComparator(comparatorList, {
                singleRange: true,
            });
            const upperBound = utils_1.getUpperBoundComparator(comparatorList, {
                singleRange: true,
            });
            if (utils_1.isSameVersionEqualsLikeComparator(lowerBound, upperBound)) {
                return new SingleVer(utils_1.stripComparatorOperator(lowerBound));
            }
            try {
                return new SingleRange(lowerBound, upperBound);
            }
            catch (err) {
                return null;
            }
        }
        case 1:
            return new SingleVer(equalsComparatorList[0]);
        default:
            // Invalid range
            return null;
    }
}
exports.createSingleRange = createSingleRange;
function isSingleRange(value) {
    return value instanceof SingleVer || value instanceof SingleRange;
}
exports.isSingleRange = isSingleRange;
//# sourceMappingURL=single-range.js.map