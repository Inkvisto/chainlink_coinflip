"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const semver_1 = __importDefault(require("semver"));
function isNotNull(value) {
    return value !== null;
}
exports.isNotNull = isNotNull;
function uniqueArray(array) {
    return [...new Set(array)];
}
exports.uniqueArray = uniqueArray;
function isNoIncludeNull(value) {
    return value.every(isNotNull);
}
exports.isNoIncludeNull = isNoIncludeNull;
function isPrerelease(version) {
    if (version instanceof semver_1.default.SemVer) {
        return version.prerelease.length !== 0;
    }
    else {
        return false;
    }
}
exports.isPrerelease = isPrerelease;
function isValidOperator(comparator, operatorList) {
    return operatorList.includes(comparator.operator);
}
exports.isValidOperator = isValidOperator;
function equalComparator(comparatorA, comparatorB) {
    return comparatorA.value === comparatorB.value;
}
exports.equalComparator = equalComparator;
function comparator2versionStr(comparator) {
    const compSemver = comparator.semver;
    return compSemver instanceof semver_1.default.SemVer ? compSemver.version : '';
}
exports.comparator2versionStr = comparator2versionStr;
// 1.2.3   / 1.2.3   ... true
// >=1.2.3 / <=1.2.3 ... true
// >=1.2.3 / 1.2.3   ... true
// >1.2.3  / <1.2.3  ... false
// >=1.2.3 / <1.2.3  ... false
// *       / *       ... false
// 1.2.3   / *       ... false
// >=1.2.3 / *       ... false
function isSameVersionEqualsLikeComparator(comparatorA, comparatorB) {
    const compVersionA = comparator2versionStr(comparatorA);
    const compVersionB = comparator2versionStr(comparatorB);
    return (compVersionA !== '' &&
        compVersionB !== '' &&
        compVersionA === compVersionB &&
        /=|^$/.test(comparatorA.operator) &&
        /=|^$/.test(comparatorB.operator));
}
exports.isSameVersionEqualsLikeComparator = isSameVersionEqualsLikeComparator;
function isEqualsComparator(comparator) {
    return (comparator.semver instanceof semver_1.default.SemVer &&
        isValidOperator(comparator, ['', '=']));
}
exports.isEqualsComparator = isEqualsComparator;
function filterUniqueComparator(comparator, index, self) {
    return self.findIndex(comp => equalComparator(comparator, comp)) === index;
}
exports.filterUniqueComparator = filterUniqueComparator;
function filterOperator(operatorList) {
    return comparator => isValidOperator(comparator, operatorList);
}
exports.filterOperator = filterOperator;
function isIntersectRanges(semverRangeList) {
    return semverRangeList.every((rangeA, index, rangeList) => rangeList.slice(index + 1).every(rangeB => rangeA.intersects(rangeB)));
}
exports.isIntersectRanges = isIntersectRanges;
function stripSemVerPrerelease(semverVersion) {
    if (!(semverVersion instanceof semver_1.default.SemVer)) {
        return '';
    }
    if (!semverVersion.prerelease.length) {
        return semverVersion.version;
    }
    const newSemverVersion = new semver_1.default.SemVer(semverVersion.version, semverVersion.options);
    newSemverVersion.prerelease = [];
    return newSemverVersion.format();
}
exports.stripSemVerPrerelease = stripSemVerPrerelease;
function stripComparatorOperator(comparator) {
    if (!comparator.operator) {
        return comparator;
    }
    const versionStr = comparator2versionStr(comparator);
    return new semver_1.default.Comparator(versionStr, comparator.options);
}
exports.stripComparatorOperator = stripComparatorOperator;
function getLowerBoundComparator(comparatorList, options = {}) {
    const validComparatorList = comparatorList.filter(comparator => isValidOperator(comparator, ['>', '>=']) ||
        !(comparator.semver instanceof semver_1.default.SemVer));
    const leComparatorVersionList = comparatorList
        .filter(filterOperator(['<=']))
        .map(comparator2versionStr);
    if (validComparatorList.length >= 1) {
        return validComparatorList.reduce((a, b) => {
            const semverA = a.semver;
            const semverB = b.semver;
            // >2.0.0      / *           ... >2.0.0
            // >2.0.0-pre  / *           ... >=2.0.0
            // >=2.0.0     / *           ... >=2.0.0
            // >=2.0.0-pre / *           ... >=2.0.0
            // *           / >2.0.0      ... >2.0.0
            // *           / >2.0.0-pre  ... >=2.0.0
            // *           / >=2.0.0     ... >=2.0.0
            // *           / >=2.0.0-pre ... >=2.0.0
            // *           / *       ... *
            if (!(semverA instanceof semver_1.default.SemVer)) {
                if (!options.singleRange &&
                    isPrerelease(semverB) &&
                    !(b.operator === '>=' &&
                        leComparatorVersionList.some(version => version === String(semverB)))) {
                    return new semver_1.default.Comparator(`>=${stripSemVerPrerelease(semverB)}`, b.options);
                }
                return b;
            }
            else if (!(semverB instanceof semver_1.default.SemVer)) {
                if (!options.singleRange &&
                    isPrerelease(semverA) &&
                    !(a.operator === '>=' &&
                        leComparatorVersionList.some(version => version === String(semverA)))) {
                    return new semver_1.default.Comparator(`>=${stripSemVerPrerelease(semverA)}`, a.options);
                }
                return a;
            }
            const semverCmp = semver_1.default.compare(semverA, semverB);
            if (a.operator === b.operator || semverCmp !== 0) {
                if (!options.singleRange) {
                    const semverCmpMain = semverA.compareMain(semverB);
                    if (semverCmpMain !== 0 &&
                        semverA.prerelease.length &&
                        semverB.prerelease.length) {
                        // ^1.9.0-alpha / ^1.9.1-alpha ... ^1.9.1
                        if (semverCmpMain > 0) {
                            return new semver_1.default.Comparator(a.operator + stripSemVerPrerelease(semverA), a.options);
                        }
                        else {
                            return new semver_1.default.Comparator(b.operator + stripSemVerPrerelease(semverB), b.options);
                        }
                    }
                }
                // >2.0.0  / >3.0.0  ... >3.0.0
                // >=1.0.0 / >=1.1.0 ... >=1.1.0
                // >2.0.0  / >=2.0.1 ... >=2.0.1
                // >=2.0.1 / >2.0.0  ... >=2.0.1
                // >2.0.1  / >=2.0.0 ... >2.0.1
                // >=2.0.0 / >2.0.1  ... >2.0.1
                if (semverCmp > 0) {
                    return a;
                }
                else {
                    return b;
                }
            }
            else {
                // >2.0.0  / >=2.0.0 ... >2.0.0
                // >=2.0.0 / >2.0.0  ... >2.0.0
                if (a.operator === '>') {
                    return a;
                }
                else {
                    return b;
                }
            }
        });
    }
    else {
        // x.x.x
        return new semver_1.default.Comparator('');
    }
}
exports.getLowerBoundComparator = getLowerBoundComparator;
function getUpperBoundComparator(comparatorList, options = {}) {
    const validComparatorList = comparatorList.filter(comparator => isValidOperator(comparator, ['<', '<=']) ||
        !(comparator.semver instanceof semver_1.default.SemVer));
    const geComparatorVersionList = comparatorList
        .filter(filterOperator(['>=']))
        .map(comparator2versionStr);
    if (validComparatorList.length >= 1) {
        return validComparatorList.reduce((a, b) => {
            const semverA = a.semver;
            const semverB = b.semver;
            // <2.0.0      / *           ... <2.0.0
            // <2.0.0-pre  / *           ... <2.0.0
            // <=2.0.0     / *           ... <=2.0.0
            // <=2.0.0-pre / *           ... <2.0.0
            // *           / <2.0.0      ... <2.0.0
            // *           / <2.0.0-pre  ... <2.0.0
            // *           / <=2.0.0     ... <=2.0.0
            // *           / <=2.0.0-pre ... <2.0.0
            // *           / *           ... *
            if (!(semverA instanceof semver_1.default.SemVer)) {
                if (!options.singleRange &&
                    isPrerelease(semverB) &&
                    !(b.operator === '<=' &&
                        geComparatorVersionList.some(version => version === String(semverB)))) {
                    return new semver_1.default.Comparator(`<${stripSemVerPrerelease(semverB)}`, b.options);
                }
                return b;
            }
            else if (!(semverB instanceof semver_1.default.SemVer)) {
                if (!options.singleRange &&
                    isPrerelease(semverA) &&
                    !(a.operator === '<=' &&
                        geComparatorVersionList.some(version => version === String(semverA)))) {
                    return new semver_1.default.Comparator(`<${stripSemVerPrerelease(semverA)}`, a.options);
                }
                return a;
            }
            const semverCmp = semver_1.default.compare(semverA, semverB);
            if (a.operator === b.operator || semverCmp !== 0) {
                if (!options.singleRange) {
                    const semverCmpMain = semverA.compareMain(semverB);
                    if (semverCmpMain !== 0 &&
                        semverA.prerelease.length &&
                        semverB.prerelease.length) {
                        // <=1.9.0-alpha / <=1.9.1-alpha ... <1.9.0
                        // <1.9.0-alpha  / <1.9.1-alpha  ... <1.9.0
                        // <=1.9.0-alpha / <1.9.1-alpha  ... <1.9.0
                        // <1.9.0-alpha  / <=1.9.1-alpha ... <1.9.0
                        if (semverCmpMain < 0) {
                            return new semver_1.default.Comparator(`<${stripSemVerPrerelease(semverA)}`, a.options);
                        }
                        else {
                            return new semver_1.default.Comparator(`<${stripSemVerPrerelease(semverB)}`, b.options);
                        }
                    }
                }
                // <2.0.0  / <3.0.0  ... <2.0.0
                // <=1.0.0 / <=1.1.0 ... <=1.0.0
                // <2.0.0  / <=2.0.1 ... <2.0.0
                // <=2.0.1 / <2.0.0  ... <2.0.0
                // <2.0.1  / <=2.0.0 ... <=2.0.0
                // <=2.0.0 / <2.0.1  ... <=2.0.0
                if (semverCmp < 0) {
                    return a;
                }
                else {
                    return b;
                }
            }
            else {
                // <2.0.0  / <=2.0.0 ... <2.0.0
                // <=2.0.0 / <2.0.0  ... <2.0.0
                if (a.operator === '<') {
                    return a;
                }
                else {
                    return b;
                }
            }
        });
    }
    else {
        // x.x.x
        return new semver_1.default.Comparator('');
    }
}
exports.getUpperBoundComparator = getUpperBoundComparator;
//# sourceMappingURL=utils.js.map